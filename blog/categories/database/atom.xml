<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数据库 | 杜永文 博客]]></title>
  <link href="http://duyw.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-01-28T13:05:41+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails中操作Sqlite3数据库速度慢的问题]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/railszhong-cao-zuo-sqlite3shu-ju-ku-su-du-man-de-wen-ti/"/>
    <updated>2014-01-28T12:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/railszhong-cao-zuo-sqlite3shu-ju-ku-su-du-man-de-wen-ti</id>
    <content type="html"><![CDATA[<p>项目中要将数据导出到sqlite数据库中，但是速度太慢了，无法接受：</p>

<p>```
   (0.1ms)  begin transaction
/home/ivan/work/temp/packagetest/app/models/material_type.rb:7: warning: multiple values for a block parameter (0 for 1)
from /home/ivan/.rvm/gems/ruby-1.8.7-p371@rails304/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/database_statements.rb:192
   (0.4ms)  insert into material_types(id,name,code,parent_id,created_at,updated_at) values ('40', '40_name','code', 40, 'Fri Nov 29 11:08:54 +0800 2013', 'Fri Nov 29 11:08:54 +0800 2013')
   (317.6ms)  commit transaction</p>

<p>   (0.1ms)  begin transaction
/home/ivan/work/temp/packagetest/app/models/material_type.rb:7: warning: multiple values for a block parameter (0 for 1)
from /home/ivan/.rvm/gems/ruby-1.8.7-p371@rails304/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/database_statements.rb:192
   (0.4ms)  insert into material_types(id,name,code,parent_id,created_at,updated_at) values ('41', '41_name','code', 41, 'Fri Nov 29 11:08:54 +0800 2013', 'Fri Nov 29 11:08:54 +0800 2013')
   (307.8ms)  commit transaction
```</p>

<p>每次最耗时的就是这个 commit transaction 了 居然要300ms左右。</p>

<p>网上查找原因：</p>

<p>SQLite 缺省为每个操作启动一个事务，所以成批插入的时候，每个插入操作都会在一个事务中执行：</p>

<p>这样的花1秒钟才能执行6个插入。如果把所有操作都放在一个事务中，速度能达到1秒几万条，完全不在一个数量级，于是寻求解决方法。</p>

<p>主要思路就是让多个插入操作在一个事务中进行，最后的解决方法是直接使用 SQLite3这个gem，而不通过active_record</p>

<p>方法介绍：</p>

<p>1 连接数据库：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@db_path</span><span class="p">)</span> <span class="c1"># 连接sqlite3数据库</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2 配置
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">results_as_hash</span> <span class="o">=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>该项默认为false， 设置成true以后返回的结果集是hash结构的，以字段名称作为key，方便读取数据，否则返回一个数组。</p>

<p>3 执行SQL 语句：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;insert into option (release_time, package_type, id, db_name, db_id) ...&quot;</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span> <span class="n">sql</span>
</span><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;select * from posts where title=? and name=? &quot;</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="s1">&#39;标题&#39;</span><span class="p">,</span><span class="s1">&#39;名称&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>4 遍历结果集
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="s1">&#39;标题&#39;</span><span class="p">,</span><span class="s1">&#39;名称&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意：如果没有找到数据会抛出异常，需要自行处理一下。</p>

<p>5 在单个事务中批量操作
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">transaction</span>
</span><span class='line'><span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;insert into post where name = &#39;name_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#39; &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">commit</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
或者
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@db.execute(&quot;insert into post where name = &#39;name_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="sr">&#39; &quot;)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Quick Tips]]></title>
    <link href="http://duyw.github.io/blog/2013/05/02/mongodb-quick-tips/"/>
    <updated>2013-05-02T11:04:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/05/02/mongodb-quick-tips</id>
    <content type="html"><![CDATA[<h3>1. 介绍</h3>

<p>　　一个mongod服务可以有建立多个数据库，每个数据库可以有多张表，这里的表名叫collection，每个collection可以存放多个文档（document），每个文档都以BSON（binary json）的形式存放于硬盘中，因此可以存储比较复杂的数据类型。它是以单文档为单位存储的，你可以任意给一个或一批文档新增或删除字段，而不会对其它文档造成影响，这就是所谓的schema-free，这也是文档型数据库最主要的优点。跟一般的key-value数据库不一样的是，它的value中存储了结构信息，所以你又可以像关系型数据库那样对某些域进行读写、统计等操作。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。Mongo还可以解决海量数据的查询效率，根据官方文档，当数据量达到50GB以上数据时，Mongo数据库访问速度是MySQL10 倍以上。</p>

<h4>BSON</h4>

<p>　　BSON是Binary JSON 的简称，是一个JSON文档对象的二进制编码格式。BSON同JSON一样支持往其它文档对象和数组中再插入文档对象和数组，同时扩展了JSON的数据类型。如：BSON有Date类型和BinDate类型。</p>

<p>　　BSON被比作二进制的交换格式，如同Protocol Buffers，但BSON比它更“schema-less”，非常好的灵活性但空间占用稍微大一点。</p>

<p>BSON有以下三个特点：</p>

<p>1． 轻量级</p>

<p>2． 跨平台</p>

<p>3． 效率高</p>

<h4>命名空间</h4>

<p>　　MongoDB存储BSON对象到collections,这一系列的数据库名和collection名被称为一个命名空间。如同：java.util.List;用来管理数据库中的数据。</p>

<h4>索引</h4>

<p>　　mongodb可以对某个字段建立索引，可以建立组合索引、唯一索引，也可以删除索引，建立索引就意味着增加空间开销。默认情况下每个表都会有一个唯一索引：<em>id，如果插入数据时没有指定</em>id，服务会自动生成一个<em>id，为了充分利用已有索引，减少空间开销，最好是自己指定一个unique的key为</em>id，通常用对象的ID比较合适，比如商品的ID。</p>

<h3>2. 安装</h3>

<p>Linux系统下有两种安装方式:</p>

<h4>第一种：下载二进制包，然后解压到相应目录即可。</h4>

<ol>
<li><p>直接到<a href="http://www.mongodb.org/downloads">官网</a>下载二进制包，下载以后是一个tgz文件。</p>

<p> <code>curl http://downloads.mongodb.org/linux/mongodb-linux-i686-2.4.3.tgz &gt; mongodb.tgz</code></p></li>
<li><p>将文件解压到指定目录</p>

<p><code>tar -zxvf mongodb.tgz</code></p>

<p>重命名：</p>

<p><code>cp -R -n  mongodb-linux-????-??-??/ mongodb</code></p></li>
</ol>


<p>在 mongodb/bin 目录下可以看到和MongoDB相关的一些二进制文件包括 mongod 等。</p>

<p>到此为止MongoDB已经安装完成，接下来开始使用MongoDB：</p>

<p>在第一次启动mongdod的时候，需要创建存放数据文件的目录，默认的目录是 <code>/data/db/</code></p>

<p>首先创建这个目录： <code>mkdir -p /data/db</code></p>

<blockquote><p>注意：</p>

<p>要确保运行 mongod 进程的系统用户对改目录拥有读写权限。</p>

<p>如果 mongod 运行在 mongo 用户帐号下，可以使用 <code>chown mongo /data/db</code> 命令来更改该目录的拥有者。</p></blockquote>

<p>至此，我们已经可以运行 mongod ，也可以通过 mongo 命令来链接到数据库，前提是这两个命令要在 MongoDB 的安装目录下的bin目录下执行。</p>

<p>如果要直接使用这两个命令，需要将它们添加到系统的环境变量里面去，方法是在bin目录下执行</p>

<p><code>sudo cp mongo /usr/bin/</code></p>

<p>之后就可以在任意目录使用 mongo 命令了。</p>

<p>将mongodb 加入到开机启动,</p>

<p><code>sudo gedit /etc/rc.local</code></p>

<p>编辑 rc.local 加入
```</p>

<h1>add mongonDB service</h1>

<p>rm -rf /data/mongodb_data/* &amp;&amp; /usr/local/mongodb/bin/mongod –dbpath=/data/mongodb_data/ –logpath=/data/mongodb_log/mongodb.log –logappend&amp;
```
注意.地址可能需要修改。</p>

<h4>第二种：通过命令行安装。</h4>

<p><code>
sudo apt-get install mongodb
</code></p>

<p>该命令会安装以下软件包：</p>

<pre><code>mongodb-clients
mongodb-dev
mongodb-server
mongodb
</code></pre>

<p>安装完成以后会生成以下文件：</p>

<pre><code>数据文件： /var/lib/mongodb
日志文件： /var/log/mongodb/mongodb.log
服务脚本： /etc/init.d/mongodb
配置文件： /etc/mongodb.conf
</code></pre>

<p>如果要修改启动选项可以直接修改这个文件。</p>

<p>安装完成以后会在系统中新建一个用户 mongodb，会用这个用户帐号来启动 MongodDB，</p>

<p>MongodDB默认使用27017端口,通过 <code>netstat -tlunp | grep 27017</code> 可以查看到进程。</p>

<p>如果要以其他用户来运行Mongodb，需要修改 /var/lib/mongodb 和 /var/log/mongodb的权限。</p>

<p>可以通过命令 <code>sudo service mongodb start/stop/restart/status</code> 来控制mongod进程。</p>

<h3>3. 使用</h3>

<p>打开终端，输入 mongo 命令，连接到MongoDB数据库：</p>

<pre><code>╭─# ivan@ubuntu in ~/work ‹ruby-1.8.7@rails304›  
╰─$ mongo
MongoDB shell version: 2.0.4
connecting to: test
&gt; 
</code></pre>

<h3>简单操作命令：</h3>

<ul>
<li>进入数据库 admin：</li>
</ul>


<p><code>use admin</code></p>

<ul>
<li>增加或修改用户密码：</li>
</ul>


<p><code>db.addUser('name','pwd')</code></p>

<ul>
<li>查看用户列表</li>
</ul>


<p><code>db.system.users.find()</code></p>

<ul>
<li>用户认证</li>
</ul>


<p><code>db.auth('name','pwd')</code></p>

<ul>
<li>删除用户</li>
</ul>


<p><code>db.removeUser('name')</code></p>

<ul>
<li>查看所有用户</li>
</ul>


<p><code>show users</code></p>

<ul>
<li>查看所有数据库</li>
</ul>


<p><code>show dbs</code></p>

<ul>
<li>查看所有的 collection</li>
</ul>


<p><code>show collections</code></p>

<ul>
<li>查看各 collection 的状态</li>
</ul>


<p><code>db.printCollectionStats()</code></p>

<ul>
<li>查看主从复制状态</li>
</ul>


<p><code>db.printReplicationInfo()</code></p>

<ul>
<li>修复数据库</li>
</ul>


<p><code>db.repairDatabase()</code></p>

<ul>
<li>设置记录 profiling，0=off 1=slow 2=all</li>
</ul>


<p><code>db.setProfilingLevel(1)</code></p>

<ul>
<li>查看profiling</li>
</ul>


<p><code>show profile</code></p>

<ul>
<li>拷贝数据库</li>
</ul>


<p><code>db.copyDatabase('mail_addr','mail_addr_tmp')</code></p>

<ul>
<li>删除 collection</li>
</ul>


<p><code>db.mail_addr.drop()</code></p>

<ul>
<li>删除当前的数据库</li>
</ul>


<p><code>db.dropDatabase()</code></p>

<h3>增删改</h3>

<ul>
<li>存储嵌套的对象</li>
</ul>


<p><code>
db.foo.save({'name':'ysz','address':{'city':'beijing','post':100096},'phone':[138,139]})
</code></p>

<ul>
<li>存储数组对象</li>
</ul>


<p><code>
db.user_addr.save({'Uid':'yushunzhi@sohu.com','Al':['test-1@sohu.com','test-2@sohu.com']})
</code></p>

<ul>
<li>根据query条件修改，如果不存在则插入，允许修改多条记录</li>
</ul>


<p><code>
db.foo.update({'yy':5},{'$set':{'xx':2}},upsert=true,multi=true)
</code></p>

<ul>
<li>删除yy=5的记录</li>
</ul>


<p><code>
db.foo.remove({'yy':5})
</code></p>

<ul>
<li>删除所有的记录</li>
</ul>


<p><code>
db.foo.remove()
</code></p>

<h3>索引</h3>

<ul>
<li>增加索引：1(ascending),-1(descending)</li>
</ul>


<p><code>
db.foo.ensureIndex({firstname: 1, lastname: 1}, {unique: true});
</code></p>

<ul>
<li>索引子对象</li>
</ul>


<p><code>
db.user_addr.ensureIndex({'Al.Em': 1})
</code></p>

<ul>
<li>查看索引信息</li>
</ul>


<p><code>
db.foo.getIndexes()
db.foo.getIndexKeys()
</code></p>

<ul>
<li>根据索引名删除索引</li>
</ul>


<p><code>
db.user_addr.dropIndex('Al.Em_1')
</code></p>

<h3>查询</h3>

<ul>
<li>查找所有</li>
</ul>


<p><code>
db.foo.find()
</code></p>

<ul>
<li>查找一条记录</li>
</ul>


<p><code>
db.foo.findOne()
</code></p>

<ul>
<li>根据条件检索10条记录</li>
</ul>


<p><code>
db.foo.find({'msg':'Hello 1'}).limit(10)
</code></p>

<ul>
<li>sort排序</li>
</ul>


<p><code>
db.deliver_status.find({'From':'ixigua@sina.com'}).sort({'Dt',-1})
db.deliver_status.find().sort({'Ct':-1}).limit(1)
</code></p>

<ul>
<li>count操作</li>
</ul>


<p><code>
db.user_addr.count()
</code></p>

<ul>
<li>distinct操作,查询指定列，去重复</li>
</ul>


<p><code>
db.foo.distinct('msg')
</code></p>

<ul>
<li>”>=”操作</li>
</ul>


<p><code>
db.foo.find({"timestamp": {"$gte" : 2}})
</code></p>

<ul>
<li>子对象的查找</li>
</ul>


<p><code>
db.foo.find({'address.city':'beijing'})
</code></p>

<h3>管理</h3>

<ul>
<li>查看collection数据的大小</li>
</ul>


<p><code>
db.deliver_status.dataSize()
</code></p>

<ul>
<li>查看colleciont状态</li>
</ul>


<p><code>
db.deliver_status.stats()
</code></p>

<ul>
<li>查询所有索引的大小</li>
</ul>


<p><code>
db.deliver_status.totalIndexSize()
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04 安装 MySQL]]></title>
    <link href="http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04-an-zhuang-mysql/"/>
    <updated>2013-04-05T20:15:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04-an-zhuang-mysql</id>
    <content type="html"><![CDATA[<h3>第一步：卸载mysql</h3>

<p><code>
sudo apt-get autoremove --purge mysql-server-5.0
sudo apt-get remove mysql-server
sudo apt-get autoremove mysql-server
sudo apt-get remove mysql-common (非常重要)
</code></p>

<h3>第二步：清理残留数据</h3>

<p><code>
dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P
</code></p>

<h3>第三步：安装 mysql</h3>

<p><code>
sudo apt-get install mysql-server
sudo apt-get install mysql-client
sudo apt-get install php5-mysql(安装php5-mysql 是将php和mysql连接起来 )
</code></p>

<p>一旦安装完成，MySQL 服务器应该自动启动。您可以在终端提示符后运行以下命令来检查 MySQL 服务器是否正在运行：</p>

<p><code>
sudo netstat -tap | grep mysql
</code></p>

<p>当您运行该命令时，您可以看到类似下面的行：</p>

<p><code>
tcp 0 0 localhost.localdomain:mysql *:* LISTEN -
</code></p>

<p>如果服务器不能正常运行，您可以通过下列命令启动它：</p>

<p><code>
sudo /etc/init.d/mysql restart
</code></p>

<h3>第四步：配置管理员密码</h3>

<p>进入mysql</p>

<p><code>
$mysql -uroot -p 管理员密码
</code></p>

<p>配置 MySQL 的管理员密码：</p>

<p><code>
sudo mysqladmin -u root password newpassword
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04 安装 PostgreSQL 和 PgAdmin3]]></title>
    <link href="http://duyw.github.io/blog/2013/04/04/ubuntu12-dot-04-an-zhuang-postgresqlhe-pgadmin3/"/>
    <updated>2013-04-04T19:33:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/04/ubuntu12-dot-04-an-zhuang-postgresqlhe-pgadmin3</id>
    <content type="html"><![CDATA[<h3>1.安装</h3>

<p>安装：<code>sudo apt-get install postgresql postgresql-client postgresql-server-dev-all</code></p>

<p>或者指定版本号：</p>

<pre><code>sudo apt-get install -y postgresql-9.1 postgresql-client-9.1 postgresql-contrib-9.1 \
postgresql-server-dev-9.1
</code></pre>

<p>启动：<code>sudo /etc/init.d/postgresql start</code></p>

<p>停止：<code>sudo /etc/init.d/postgresql stop</code></p>

<p>重启：<code>sudo /etc/init.d/postgresql restart</code></p>

<p>察看状态：<code>sudo /etc/init.d/postgresql status</code></p>

<p>另外，也可以使用命令：<code>sudo service postgresql  [start/stop/restart/status]</code></p>

<p>以上命令将把PostgreSQL安装到以下目录：</p>

<pre><code>/usr/lib/postgresql/9.1/        存放postgresql相关的二进制文件
/usr/lib/postgresql/9.1/bin/    可执行文件 
/usr/lib/postgresql/9.1/lib/    共享库文件 
/etc/postgres/9.1/main/         存放postgresql配置文文件 
/var/lib/postgresql/            postgres用户的主文件夹
</code></pre>

<!-- more -->


<h3>2.配置管理员“postgres”，使用psql</h3>

<p>PostgreSQL数据默认会创建一个linux用户postgres，需要修改操作系统“postgres”用户的密码为“postgres”：</p>

<ol>
<li><p>删除密码：<code>sudo passwd -d postgres  //passwd -d 是清空指定用户密码的意思</code></p></li>
<li><p>设置密码：<code>sudo -u postgres passwd  //或者 sudo su postgres -c passwd</code></p></li>
</ol>


<p>用sudo权限以用户postgres身份登陆PostgreSQL:</p>

<pre><code>sudo -u postgres psql [ -U postgres -h 127.0.0.1]   
// 运行psql,后面[]中的内容可选，用于登录服务器，默认会登录本机；
</code></pre>

<p>或者：</p>

<p><code>sudo su postgres -c psql template1（PostgreSQL的默认数据库是template1）</code></p>

<p>运行 PostgreSQL 交互的终端程序， 叫 psql，它允许你交互地输入，编辑，和执行 SQL 命令。</p>

<p>启动 psql：<code>psql mydb</code>（以用户postgres登陆psql：<code>sudo su postgres -c psql</code>）</p>

<p>在 psql 里输入help命令，你会看到下面的提示信息：</p>

<pre><code>You are using psql, the command-line interface to PostgreSQL.
Type:  \copyright for distribution terms
          \h for help with SQL commands
          \? for help with psql commands
          \g or terminate with semicolon to execute query
          \q to quit
</code></pre>

<p>修改PostgreSQL的管理员用户postgres的密码为“postgres”（同操作系统用户postgres的密码一样）：</p>

<p><code>postgres=# ALTER USER postgres WITH PASSWORD 'postgres';</code></p>

<p>查询当前使用的postgresql版本：<code>SELECT version()；</code></p>

<p>查询大概年前日期：            <code>SELECT current_date;</code></p>

<p>现在，我们就可以在数据库服务器上用 postgres帐号通过psql或者pgAdmin等等客户端操作数据库了
（暂时还不能远程访问）。</p>

<h3>3.管理PostgreSQL用户</h3>

<p>1 创建新用户pgsql，但不给建数据库的权限，有两中创建方式：</p>

<p><strong>一种是在外部命令行直接创建：</strong></p>

<p>  命令：<code>createuser [-a] [-A] [-d] [-D] [-e] [-P] [-h 主机名] [-p port] 用户名</code></p>

<pre><code>参数说明：
[-a]：允许创建其他用户，相当于创建一个超级用户；
[-A]：不允许此用户创建其他用户；
[-d]：允许此用户创建数据库；
[-D]：不允许此用户创建数据库；
[-e]：将执行过程显示到Shell上；
[-P]：创建用户时，同时设置密码；
[-h 主机名]：为某个主机上的Postgres创建用户；
[-p port]：与-h参数一同使用，指定主机的端口。
</code></pre>

<p>例如：</p>

<p><code>ivan@ubuntu:~$ sudo -u postgres createuser -D -P pgsql</code></p>

<p>执行以后会看到如下提示：</p>

<pre><code>Enter password for new role: 
Enter it again: 
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
</code></pre>

<p><strong>另一种方式是登陆psql，通过SQL语句创建：</strong></p>

<p>首先登陆：</p>

<p><code>ivan@ubuntu:~$ psql -U postgres -h 127.0.0.1</code></p>

<p>然后创建：</p>

<pre><code>postgres=# create user “pgsql” with password ‘123456’ nocreatedb; 
//用户名和数据库名称加上引号后才区分大小写，否则会自动转换成小写
</code></pre>

<p>2 删除用户：</p>

<p>外部：<code>sudo -u postgres dropuser pgsql</code></p>

<p>内部：``</p>

<h3>4.创建和删除数据库</h3>

<p>同样有外部命令行和psql的SQL语句这两种创建方式。</p>

<p>创建数据库 mydb, 其拥有者是pgsql用户：</p>

<p>1  通过命令行创建（shell命令）：</p>

<p>创建数据库：<code>sudo -u postgres createdb mydb -O pgsql   // -O 设定所有者pgsql；</code></p>

<p>删除数据库：<code>sudo -u postgres dropdb   mydb</code></p>

<p>2  通过psql来创建(sql命令)：</p>

<p>首先利用psql登录PostgreSQL服务器:</p>

<pre><code>sudo -u postgres psql [ -U postgres -h 127.0.0.1]  
//运行psql,后面[]中的内容可选，用于登录服务器，默认会登录本机；`
</code></pre>

<p>然后在psql程序中创建数据库（需要先创建好pgsql用户）:</p>

<p><code>create database “mydatabase” with owner=pgsql;</code></p>

<h3>5.数据库导入导出</h3>

<p><strong>导出：</strong>取得服务器 192.168.1.1 上 PostgreSQL中pgsql用户的mydb数据库，导出到当前目录下的 mydb.dump 文件：</p>

<p><code>pg_dump -h 192.168.1.1 -U pgsql -Fc mydb &gt; mydb.dump</code></p>

<p><strong>导入：</strong>将导出的文件 mydb.dump 导入到本地PostgreSQL数据库中pgsql用户下(需要提前创建pgsql用户），要求导入后的数据库名称为“mydb”</p>

<p><code>pg_restore ./mydb.dump | psql -Upgsql -d mydb</code></p>

<h3>6.修改PostgresSQL数据库配置实现远程访问</h3>

<p><code>ivan@ubuntu:~$ sudo vim /etc/postgresql/9.1/main/postgresql.conf</code></p>

<p>1.监听任何地址访问，修改连接权限</p>

<p><code>#listen_addresses = ‘localhost’  改为 listen_addresses = ‘*’</code></p>

<p>2.启用密码验证</p>

<p><code>#password_encryption = on      改为   password_encryption = on</code></p>

<p>3.可访问的用户ip段</p>

<p><code>ivan@ubuntu:~$ sudo vim /etc/postgresql/9.1/main/pg_hba.conf</code></p>

<p>并在文档末尾加上以下内容</p>

<pre><code># to allow your client visiting postgresql server
host all all 0.0.0.0 0.0.0.0 md5
</code></pre>

<p>解释一下最后一行：</p>

<pre><code>host表示允许的类型是主机； 
第一个all是允许的数据库名字； 
第二个all是允许的用户； 
第一个0.0.0.0是允许访问的ip address； 
第二个0.0.0.0是允许访问的subnet mask； 
最后的md5表示密码的加密方式，如果将md5改成trust则可以让指定范围的主机数据库的时候不需要提供密码。
关于 ip address 和 subnet mask ，你也可以修改为你的机器IP地址(如10.13.19.53)和子网掩码(如 255.255.255.255)，
这样就只有你自己的主机可以远程访问数据库了。 如果要使用一个IP地址范围，只需要把子网掩码设置成合适的值，
如果子网掩码设置成0.0.0.0，则所有主机均可以访问数据库（IP可以任意设定），
如果将md5改成trust则可以让指定范围的主机访问指定的数据库的时候不需要提供密码。
</code></pre>

<p>4.重启PostgreSQL数据库</p>

<p><code>ivan@ubuntu:~$ sudo /etc/init.d/postgresql restart</code></p>

<h3>7.安装postgresql数据库pgAdmin3客户端管理程序</h3>

<p><code>ivan@ubuntu:~$ sudo apt-get install -y pgadmin3</code></p>

<p>遇到问题：</p>

<p>1 安装过程中总是下载不了要安装的文件，更新源添加163源都无法解决，最后通过vpn翻墙以后可以正常安装。</p>

<p>2 安装以后pgAdmin3固定到启动器后不显示图标，解决方法，修改/usr/share/applications目录下的 pgAdmin III.desktop文件，将其中的 Icon值改为“/usr/share/pixmaps/pgadmin3.svg”，搞定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 连接 Oracle]]></title>
    <link href="http://duyw.github.io/blog/2010/12/29/rails-lian-jie-oracle/"/>
    <updated>2010-12-29T14:06:00+08:00</updated>
    <id>http://duyw.github.io/blog/2010/12/29/rails-lian-jie-oracle</id>
    <content type="html"><![CDATA[<p>我的环境如下：</p>

<pre><code>ruby 1.8.7

rails 2.3.8 

本机安装 Oracle 11g客户端

另一台电脑安装 Oracle 11g的服务器端
</code></pre>

<p>需要用到的gem包：</p>

<pre><code>ruby-oci8

activerecord-oracle-adapter
</code></pre>

<h3>操作步骤：</h3>

<p> activerecord-oracle-adapter插件的使用说明：<a href="http://github.com/rsim/oracle-enhanced/wiki/Usage">跳转</a></p>

<h4>1.首先将oracle客户端添加到系统环境变量中。</h4>

<pre><code>注意：

* Oracle 的密码不能为纯数字，否则报错。

* 安装好客户端后要确保安装无误，可以访问到服务器。
</code></pre>

<h4>2.安装需要的gem包</h4>

<p><code>
gem install ruby-oci8-2.0.4-x86-mingw32.gem
gem install activerecord-oracle-adapter --source http://gems.rubyonrails.org
</code></p>

<p>注意：安装好 oci8 后要测试 是否安装正确 方法是打开 irb 输入 require ‘oci8’ 如果不报错说明安装成功。</p>

<p>另外可以用oci8测试 查询：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OCI8</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;dyw1&#39;</span><span class="p">,</span><span class="s1">&#39;123456&#39;</span><span class="p">,</span><span class="s1">&#39;192.168.23.162/orcl&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">exec</span><span class="p">(</span><span class="s1">&#39;select * from journals&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">r</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->


<h4>3.在rails项目中，进入config目录，修改 environment.rb 文件，添加如下内容：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">gem</span> <span class="s2">&quot;activerecord-oracle_enhanced-adapter&quot;</span><span class="p">,</span> <span class="ss">:lib</span> <span class="o">=&gt;</span> <span class="s2">&quot;active_record/connection_adapters/oracle_enhanced_adapter&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>4.修改config目录下的 database.yml 文件，配置数据库的格式：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>YAML代码:  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">oracle_enhanced</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">192.168.23.162/ORCL</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">OPAC</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">opac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>5.在config/initializers 目录下创建文件 oracle.rb，当rails启动会自动执行，内容：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:ConnectionAdapters</span><span class="o">::</span><span class="no">OracleEnhancedAdapter</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">emulate_integers_by_column_name</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">emulate_dates_by_column_name</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">emulate_booleans_from_strings</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">string_to_date_format</span> <span class="o">=</span> <span class="s2">&quot;%d.%m.%Y&quot;</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">string_to_time_format</span> <span class="o">=</span> <span class="s2">&quot;%d.%m.%Y %H:%M:%S&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br>


<hr />

<h5>下面是网上找的一些资料：</h5>

<p>rails开发中的Oracle问题</p>

<p>1.关联查询时的条件字段要明确指定</p>

<p>碰到的问题为mysql下order by id正常, Oracle报错：OCIError: ORA-00918: column ambiguously defined</p>

<p>2.`表名`问题</p>

<p>mysql会给表名外加 `` (注意不是单引号), 手工加条件(如排序: order by `departments`.id)时,mysql正常，Oracle报错： OCIError: ORA-00911: invalid character</p>

<p>3.级联更新问题</p>

<p>has_one、has_many如未设置:dependent=>:delete/:delete_all，解除子项关联时，默认会去更新子项的外键为NULL，mysql下没问题，Oracle报错：OCIError: ORA-01407: cannot update</p>

<p>4.日期问题</p>

<p>2个短格式(yyyy-mm-dd)日期(一个从数据库取)直接相减求时间差得到相差天数, mysql下正常，oracle下出错, 可以采取date.to_s(:db).to_date的办法解决</p>

<p>5.修改字段</p>

<p>如果字段值不为空，oracle下不可修改字段类型，mysql下可以，可以用增加临时字段的方式解决。</p>
]]></content>
  </entry>
  
</feed>

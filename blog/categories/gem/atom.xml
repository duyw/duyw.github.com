<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | 杜永文 博客]]></title>
  <link href="http://duyw.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-01-29T20:49:33+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何制作gem包]]></title>
    <link href="http://duyw.github.io/blog/2014/01/29/ru-he-zhi-zuo-gembao/"/>
    <updated>2014-01-29T19:45:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/29/ru-he-zhi-zuo-gembao</id>
    <content type="html"><![CDATA[<p>Rails 支持多种形式的拓展，像plugin、gem或者干脆直接将通用工具类代码放置到lib目录下。plugin已经不推荐使用了，目前来看，最好的方式就是写成gem，本文是我学习gem制作整理的笔记，文中以手动添加一个helper方法为例。</p>

<h3>第一步：安装 bundler</h3>

<p>首先通过 <code>gem list</code> 命令查看如果已经安装了bundler就可以跳过此步。</p>

<p>安装命令：</p>

<p><code>
gem install bundler
</code></p>

<h3>第二步：使用 bundler 生成一个基础gem结构</h3>

<p><code>
bundle gem my_gem
</code></p>

<p>执行以后会看到以下输出：</p>

<pre><code>create  my_gem/Gemfile
create  my_gem/Rakefile
create  my_gem/LICENSE.txt
create  my_gem/README.md
create  my_gem/.gitignore
create  my_gem/my_gem.gemspec
create  my_gem/lib/my_gem.rb
create  my_gem/lib/my_gem/version.rb
Initializating git repo in /home/ivan/private/my_gem
</code></pre>

<p>说明：</p>

<ol>
<li><p><code>my_gem.gemspec</code> 文件相当于gem的说明书（specification），其中定义了Gem的内容、作者、描述、主页等信息。将来打包的时候会依赖这个文件。</p></li>
<li><p>Gem的代码主要放置在<code>lib</code>目录下。</p></li>
<li><p>整个项目加入了Git版本控制。</p></li>
<li><p>如果gem本身需要引入其他依赖的包，需要在<code>.gemspec</code>文件中指明例如:</p>

<p> <code>spec.add_development_dependency "rake"</code>  引入开发依赖</p>

<p> <code>spec.add_development_dependency "rails"</code> 引入运行依赖</p></li>
<li><p>项目中有Gemfile文件，可将其中的 source 替换成淘宝源 "http://ruby.taobao.org"。</p></li>
<li><p>另外，在Gemfile有一行内容是"gemspec",表明该项目依赖的gem包在<code>.gemspec</code>文件中指出，这就解释了为什么会有上面第4条。</p></li>
<li><p>my_gem/lib/my_gem/version.rb 文件中可以填写gem的版本信息。</p></li>
</ol>


<h3>第三步：编写gem要实现的功能</h3>

<p>这里我们实现一个helper方法，在页面输出一段Html代码。</p>

<ol>
<li>新建文件 helper.rb , 路径： lib/my_gem/helper.rb</li>
</ol>


<p>```</p>

<h1>coding: utf-8</h1>

<p>module MyGem
  module MyHelper</p>

<pre><code>def my_helper
  time = DateTime.parse(Time.now.to_s).strftime('%H:%M:%S').to_s
  date = DateTime.parse(Time.now.to_s).strftime('%Y-%m-%d').to_s
  html =  []
  html &lt;&lt; '&lt;div id="mydiv"&gt;'
  html &lt;&lt; '&lt;div id="time"&gt;' + time + '&lt;/div&gt;'
  html &lt;&lt; '&lt;div id="date"&gt;' + date + '&lt;/div&gt;'
  html &lt;&lt; '&lt;/div&gt;'
  raw html.join("\n")
end
</code></pre>

<p>  end
end
```</p>

<ol>
<li>引入刚才写的helper</li>
</ol>


<p>修改 lib/my_gem.rb 文件，首行添加：</p>

<p><code>
require "my_gem/helper"
</code></p>

<ol>
<li>将helper正真拓展到rails中去</li>
</ol>


<p>修改 lib/my_gem.rb 文件，尾行添加：</p>

<p><code>
ActionView::Base.send :include, MyGem::MyHelper
</code></p>

<h3>第四步：提交代码</h3>

<p>将项目提交到Git仓库，用到的命令：</p>

<pre><code>git add *

git commit -m "finish my gem"
</code></pre>

<p>这一步很重要，因为在<code>.gemspec</code>文件中有这么一行：</p>

<p><code>
spec.files         = `git ls-files`.split($/)
</code></p>

<p>它调用了 <code>git ls-files</code> 命令来获取需要打包的文件，而这一命令只会返回Git仓库中的所有的文件，如果我们不提交代码那么项目中新建的文件就不会被打包进来。</p>

<h3>第五步：打包</h3>

<p>在项目下执行命令 <code>gem build my_gem.gemspec</code></p>

<pre><code>WARNING:  no homepage specified
  Successfully built RubyGem
  Name: my_gem
  Version: 0.0.1
  File: my_gem-0.0.1.gem
</code></pre>

<p>这里有一个警告，提醒我们填写homepage，这里只是练习不做理会。</p>

<h3>第六步：使用</h3>

<p>使用方法和其他gem包一样,需要注意的是我们的gem包并没有发布到rubygems.org，所以 gem install 的时候在my_gem-0.0.1.gem 文件所在的目录执行就ok了。</p>

<ol>
<li><p>安装： <code>gem install my_gem-0.0.1.gem</code></p></li>
<li><p>在rails项目的Gemfile中添加 <code>gem "my_gem"</code></p></li>
<li><p>在rails项目下运行命令 'bundle'</p></li>
<li><p>在erb页面直接调用： <code>&lt;%= my_helper %&gt;</code> 。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install gem without ri and rdoc]]></title>
    <link href="http://duyw.github.io/blog/2013/05/03/install-gem-without-ri-and-rdoc/"/>
    <updated>2013-05-03T09:23:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/05/03/install-gem-without-ri-and-rdoc</id>
    <content type="html"><![CDATA[<p>用 <code>gem install XXX</code> 安装 Gem 包的同时会安装 ri 和 rdoc，但这两个东西一般用不到，另外还严重影响安装速度，介于这两个原因我们一般都会这么做：</p>

<p><code>gem install rails --no-ri --no-rdoc</code></p>

<p>但是每个 Gem 包安装都这么做就太麻烦了，我们可以直接修改配置让 Gem 默认不安装 ri 和 rdoc：</p>

<p>打开 ~/.gemrc   （如果没有这个文件可以自己手动创建）</p>

<p>在文件最后加入 <code>gem: --no-ri --no-rdoc</code> ：</p>

<pre><code>---
:backtrace: false
:benchmark: false
:bulk_threshold: 1000
:sources:
- http://ruby.taobao.org
:update_sources: true
:verbose: true
gem: --no-ri --no-rdoc
</code></pre>

<p>大功告成~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GEM 更新]]></title>
    <link href="http://duyw.github.io/blog/2013/04/04/gem-geng-xin/"/>
    <updated>2013-04-04T21:56:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/04/gem-geng-xin</id>
    <content type="html"><![CDATA[<p>更新方法：</p>

<ol>
<li><p>从低版本升级到高版本</p>

<p><code>gem update –system</code></p></li>
<li><p>从高版本降到低版本</p></li>
</ol>


<p>  从 <a href="http://rubyforge.org/frs/?group_id=126">RubyForge</a> 下载需要的版本,以tgz格式为例:</p>

<p>  先解压  <code>tar zxf gem_name_xxxxx</code></p>

<p>  cd 进去 <code>ruby setup.rb</code></p>

<p>  查看帮助: <code>ruby setup.rb --help</code></p>

<p>参考：<a href="https://rubygems.org/pages/download">https://rubygems.org/pages/download</a></p>
]]></content>
  </entry>
  
</feed>

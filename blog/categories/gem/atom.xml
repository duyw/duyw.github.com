<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | 杜永文 博客]]></title>
  <link href="http://duyw.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-02-25T16:20:24+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyGems 笔记之二]]></title>
    <link href="http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-er/"/>
    <updated>2014-02-10T20:13:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-er</id>
    <content type="html"><![CDATA[<h3>gem的结构</h3>

<p>1  每一个gem都要有名称、版本、运行环境。以rake 0.8.7 为例，其名称'rake',版本'1.8.7',运行平台是ruby，意味着可以运行在任何ruby平台上。</p>

<p>2 运行环境是基于CPU架构、操作系统之上，有时候还会受限于操作系统的版本。</p>

<p>3 在gem中包含以下组件
  代码：（包括测试和辅助程序）
  文档
  gemspec（gem的自述文件）</p>

<p>每一个gem包的代码结构组织都遵循统一的标准
<code>
% tree freewill
freewill/
├── bin/
│   └── freewill
├── lib/
│   └── freewill.rb
├── test/
│   └── test_freewill.rb
├── README
├── Rakefile
└── freewill.gemspec
</code></p>

<p>如上所示，一个gem包含的主要组件有：</p>

<p><code>lib</code>目录：包含gem的代码</p>

<p><code>test</code>目录或<code>spec</code>目录，包含测试代码，取决于开发者用的是哪个测试框架。</p>

<p><code>Rakefile</code>文件：rake程序使用该文件进行自动化测试，生成代码或者执行其他任务。</p>

<p><code>bin</code>目录：当gem安装好以后，bin目录将添加到用户的环境变量中去。</p>

<p>文档通常在<code>README</code>中或者在代码的注释里面。当gem安装完成的时候，文档也会为你自动生成好，大部分gem包含RDoc文档，也有用YARD的。</p>

<p><code>gemspec</code>文件，该文件的内容包含了文档相关的信息。</p>

<h3>The Gemspec</h3>

<p>gemspec文件包含了文档的名称、作者、版本等相关的信息，例如：</p>

<p><code>
% cat freewill.gemspec
Gem::Specification.new do |s|
  s.name        = 'freewill'
  s.version     = '1.0.0'
  s.summary     = "Freewill!"
  s.description = "I will choose Freewill!"
  s.authors     = ["Nick Quaranto"]
  s.email       = 'nick@quaran.to'
  s.homepage    = 'http://example.com/freewill'
  s.files       = ["lib/freewill.rb", ...]
end
</code></p>

<p>更多gemspec相关内容参看<a href="http://guides.rubygems.org/specification-reference/">http://guides.rubygems.org/specification-reference/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyGems 笔记之一]]></title>
    <link href="http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-yi/"/>
    <updated>2014-02-10T18:46:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-yi</id>
    <content type="html"><![CDATA[<h2>简介：</h2>

<hr />

<ol>
<li><p>ruby的软件包称为 'gem', 类似与java的jar包。ruby的gem包用来拓展或修改ruby应用程序的函数，通常将一些可复用的函数打包成gem，作为库与方便与其他开发者共享。有的gem提供了命令行工具来实现 automate tasks ，提升你的工作效率。</p></li>
<li><p>RubyGems是用于管理gem工具，可以方便的下载、安装、使用和卸载gem。</p></li>
<li><p><code>gem</code> 命令用于管理RubyGems。Ruby1.9 以及后来的版本都默认集成了RubyGmes，安装完ruby以后，就可以直接使用 gem 命令。</p></li>
</ol>


<h2>使用</h2>

<hr />

<h3>一、 查找Gems：</h3>

<p><code>search</code> 命令用于查找远程的gem包。</p>

<p>```
╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›<br/>
╰─$ gem searc\<sup>rails</sup></p>

<p><strong><em> REMOTE GEMS </em></strong></p>

<p>rails (4.0.2)
rails-3-settings (0.1.1)
rails-action-args (0.1.1)
rails-admin (0.0.0)
...
<code>``
</code>-d` 参数可以查看更加详细的信息：</p>

<p>```
╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›<br/>
╰─$ gem search  \<sup>rails\$</sup> -d</p>

<p><strong><em> REMOTE GEMS </em></strong></p>

<p>rails (4.0.2)</p>

<pre><code>Author: David Heinemeier Hansson
Homepage: http://www.rubyonrails.org

Full-stack web application framework.
</code></pre>

<p>```</p>

<p>其他参数， 参考 <code>gem search --help</code></p>

<h3>二、 安装Gems</h3>

<p><code>install</code> 命令用于安装gems。</p>

<p>例如：</p>

<p><code>
gem install rails -v= 4.0 --no-rdoc --no-ri
</code></p>

<h3>三、Requiring code</h3>

<p>RubyGems 修改了Ruby的加载路径，并且控制如何查找require进来的ruby代码。当require一个gem的时候，会将这个gem的路径添加到全局变量<code>$LOAD_PATH</code>中。</p>

<p>在启动irb的时候，通过 <code>-r</code> 参数可以指定要加载的gem：</p>

<p><code>
╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›  
╰─$ irb -rpp
irb(main):001:0&gt;  pp $LOAD_PATH
["/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0/i686-linux",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0/i686-linux",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/i686-linux"]
...
</code>
默认只加载几个必要的标准库，如果要加载指定的gem：</p>

<p><code>
╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›  
╰─$ irb -rpp
irb(main):001:0&gt; require 'rails'
=&gt; true
irb(main):002:0&gt;  pp $LOAD_PATH
["/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/i18n-0.6.5/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/multi_json-1.7.9/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/tzinfo-0.3.37/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/atomic-1.1.12/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/thread_safe-0.1.2/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/activesupport-4.0.0/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/builder-3.1.4/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/rack-1.5.2/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/rack-test-0.6.2/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/erubis-2.7.0/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/actionpack-4.0.0/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/thor-0.18.1/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/railties-4.0.0/lib",
 "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/json-1.8.0/lib",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0/i686-linux",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0/i686-linux",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0",
 "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/i686-linux"]
...
</code></p>

<p>注意： 如果您使用的是 ruby 1.8 版本，在引入任何gem之前，需要先引入 rubygems： <code>require 'rubygems'</code>，在某gem所在目录的lib目录下，必须存在一个rb文件和一个目录，要求名称和gem的名称一致。</p>

<p>```
% tree freewill/
freewill/
└── lib/</p>

<pre><code>├── freewill/
│   ├── user.rb
│   ├── widget.rb
│   └── ...
└── freewill.rb
</code></pre>

<p>```</p>

<h3>四、 列举出所有已经安装好的gem</h3>

<p><code>list</code> 命令可以列举出所有已经安装好个gem</p>

<p>```
╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0›<br/>
╰─$ gem list</p>

<p><strong><em> LOCAL GEMS </em></strong></p>

<p>bigdecimal (1.2.0)
gem-wrappers (1.2.4)
io-console (0.4.2)
json (1.7.7)
minitest (4.3.2)
psych (2.0.0)
rake (0.9.6)
rdoc (4.0.0)
test-unit (2.0.0.0)</p>

<p>```</p>

<h3>五、 卸载Gems</h3>

<p><code>uninstall</code> 命令用于卸载已经安装的gem包。</p>

<p><code>
$ gem uninstall drip
Successfully uninstalled drip-0.0.2
</code></p>

<p>如果你要卸载一个被其他gem依赖的gem，会要求进行确认：</p>

<p>```
$ gem uninstall rbtree</p>

<p>You have requested to uninstall the gem:</p>

<pre><code>rbtree-0.4.1
</code></pre>

<p>drip-0.0.2 depends on rbtree (>= 0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  n
ERROR:  While executing gem ... (Gem::DependencyRemovalException)</p>

<pre><code>Uninstallation aborted due to dependent gem(s)
</code></pre>

<p>```</p>

<h3>六、 查看gem文档</h3>

<p><code>ri</code> 命令可以用于查看gem的文档。或者运行 <code>gem server</code> 通过浏览器查看</p>

<h3>七、 Fetching and Unpacking Gems</h3>

<p>如果你仅仅想获取并查看一个gem的内容，可以通过<code>fetch</code>和<code>unpack</code>命令来实现：</p>

<p>```
╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›<br/>
╰─$ gem fetch json
Fetching: json-1.1.5-x86-linux.gem (100%)
Downloaded json-1.1.5-x86-linux</p>

<p>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›<br/>
╰─$ ls <br/>
json-1.1.5-x86-linux.gem</p>

<p>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›<br/>
╰─$ gem unpack json-1.1.5-x86-linux.gem
Unpacked gem: '/home/ivan/private/temp/json-1.1.5-x86-linux'</p>

<p>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›<br/>
╰─$ ls
json-1.1.5-x86-linux  json-1.1.5-x86-linux.gem
```</p>

<p>以上内容参考：</p>

<p><a href="http://guides.rubygems.org/rubygems-basics/">http://guides.rubygems.org/rubygems-basics/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何制作gem包]]></title>
    <link href="http://duyw.github.io/blog/2014/01/29/ru-he-zhi-zuo-gembao/"/>
    <updated>2014-01-29T19:45:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/29/ru-he-zhi-zuo-gembao</id>
    <content type="html"><![CDATA[<p>Rails 支持多种形式的拓展，像plugin、gem或者干脆直接将通用工具类代码放置到lib目录下。plugin已经不推荐使用了，目前来看，最好的方式就是写成gem，本文是我学习gem制作整理的笔记，文中以手动添加一个helper方法为例。</p>

<h3>第一步：安装 bundler</h3>

<p>首先通过 <code>gem list</code> 命令查看如果已经安装了bundler就可以跳过此步。</p>

<p>安装命令：</p>

<p><code>
gem install bundler
</code></p>

<h3>第二步：使用 bundler 生成一个基础gem结构</h3>

<p><code>
bundle gem my_gem
</code></p>

<p>执行以后会看到以下输出：</p>

<pre><code>create  my_gem/Gemfile
create  my_gem/Rakefile
create  my_gem/LICENSE.txt
create  my_gem/README.md
create  my_gem/.gitignore
create  my_gem/my_gem.gemspec
create  my_gem/lib/my_gem.rb
create  my_gem/lib/my_gem/version.rb
Initializating git repo in /home/ivan/private/my_gem
</code></pre>

<p>说明：</p>

<ol>
<li><p><code>my_gem.gemspec</code> 文件相当于gem的说明书（specification），其中定义了Gem的内容、作者、描述、主页等信息。将来打包的时候会依赖这个文件。</p></li>
<li><p>Gem的代码主要放置在<code>lib</code>目录下。</p></li>
<li><p>整个项目加入了Git版本控制。</p></li>
<li><p>如果gem本身需要引入其他依赖的包，需要在<code>.gemspec</code>文件中指明例如:</p>

<p> <code>spec.add_development_dependency "rake"</code>  引入开发依赖</p>

<p> <code>spec.add_development_dependency "rails"</code> 引入运行依赖</p></li>
<li><p>项目中有Gemfile文件，可将其中的 source 替换成淘宝源 "http://ruby.taobao.org"。</p></li>
<li><p>另外，在Gemfile有一行内容是"gemspec",表明该项目依赖的gem包在<code>.gemspec</code>文件中指出，这就解释了为什么会有上面第4条。</p></li>
<li><p>my_gem/lib/my_gem/version.rb 文件中可以填写gem的版本信息。</p></li>
</ol>


<h3>第三步：编写gem要实现的功能</h3>

<p>这里我们实现一个helper方法，在页面输出一段Html代码。</p>

<ol>
<li>新建文件 helper.rb , 路径： lib/my_gem/helper.rb</li>
</ol>


<p>```</p>

<h1>coding: utf-8</h1>

<p>module MyGem
  module MyHelper</p>

<pre><code>def my_helper
  time = DateTime.parse(Time.now.to_s).strftime('%H:%M:%S').to_s
  date = DateTime.parse(Time.now.to_s).strftime('%Y-%m-%d').to_s
  html =  []
  html &lt;&lt; '&lt;div id="mydiv"&gt;'
  html &lt;&lt; '&lt;div id="time"&gt;' + time + '&lt;/div&gt;'
  html &lt;&lt; '&lt;div id="date"&gt;' + date + '&lt;/div&gt;'
  html &lt;&lt; '&lt;/div&gt;'
  raw html.join("\n")
end
</code></pre>

<p>  end
end
```</p>

<ol>
<li>引入刚才写的helper</li>
</ol>


<p>修改 lib/my_gem.rb 文件，首行添加：</p>

<p><code>
require "my_gem/helper"
</code></p>

<ol>
<li>将helper正真拓展到rails中去</li>
</ol>


<p>修改 lib/my_gem.rb 文件，尾行添加：</p>

<p><code>
ActionView::Base.send :include, MyGem::MyHelper
</code></p>

<h3>第四步：提交代码</h3>

<p>将项目提交到Git仓库，用到的命令：</p>

<pre><code>git add *

git commit -m "finish my gem"
</code></pre>

<p>这一步很重要，因为在<code>.gemspec</code>文件中有这么一行：</p>

<p><code>
spec.files         = `git ls-files`.split($/)
</code></p>

<p>它调用了 <code>git ls-files</code> 命令来获取需要打包的文件，而这一命令只会返回Git仓库中的所有的文件，如果我们不提交代码那么项目中新建的文件就不会被打包进来。</p>

<h3>第五步：打包</h3>

<p>在项目下执行命令 <code>gem build my_gem.gemspec</code></p>

<pre><code>WARNING:  no homepage specified
  Successfully built RubyGem
  Name: my_gem
  Version: 0.0.1
  File: my_gem-0.0.1.gem
</code></pre>

<p>这里有一个警告，提醒我们填写homepage，这里只是练习不做理会。</p>

<h3>第六步：使用</h3>

<p>使用方法和其他gem包一样,需要注意的是我们的gem包并没有发布到rubygems.org，所以 gem install 的时候在my_gem-0.0.1.gem 文件所在的目录执行就ok了。</p>

<ol>
<li><p>安装： <code>gem install my_gem-0.0.1.gem</code></p></li>
<li><p>在rails项目的Gemfile中添加 <code>gem "my_gem"</code></p></li>
<li><p>在rails项目下运行命令 'bundle'</p></li>
<li><p>在erb页面直接调用： <code>&lt;%= my_helper %&gt;</code> 。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install gem without ri and rdoc]]></title>
    <link href="http://duyw.github.io/blog/2013/05/03/install-gem-without-ri-and-rdoc/"/>
    <updated>2013-05-03T09:23:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/05/03/install-gem-without-ri-and-rdoc</id>
    <content type="html"><![CDATA[<p>用 <code>gem install XXX</code> 安装 Gem 包的同时会安装 ri 和 rdoc，但这两个东西一般用不到，另外还严重影响安装速度，介于这两个原因我们一般都会这么做：</p>

<p><code>gem install rails --no-ri --no-rdoc</code></p>

<p>但是每个 Gem 包安装都这么做就太麻烦了，我们可以直接修改配置让 Gem 默认不安装 ri 和 rdoc：</p>

<p>打开 ~/.gemrc   （如果没有这个文件可以自己手动创建）</p>

<p>在文件最后加入 <code>gem: --no-ri --no-rdoc</code> ：</p>

<pre><code>---
:backtrace: false
:benchmark: false
:bulk_threshold: 1000
:sources:
- http://ruby.taobao.org
:update_sources: true
:verbose: true
gem: --no-ri --no-rdoc
</code></pre>

<p>大功告成~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GEM 更新]]></title>
    <link href="http://duyw.github.io/blog/2013/04/04/gem-geng-xin/"/>
    <updated>2013-04-04T21:56:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/04/gem-geng-xin</id>
    <content type="html"><![CDATA[<p>更新方法：</p>

<ol>
<li><p>从低版本升级到高版本</p>

<p><code>gem update –system</code></p></li>
<li><p>从高版本降到低版本</p></li>
</ol>


<p>  从 <a href="http://rubyforge.org/frs/?group_id=126">RubyForge</a> 下载需要的版本,以tgz格式为例:</p>

<p>  先解压  <code>tar zxf gem_name_xxxxx</code></p>

<p>  cd 进去 <code>ruby setup.rb</code></p>

<p>  查看帮助: <code>ruby setup.rb --help</code></p>

<p>参考：<a href="https://rubygems.org/pages/download">https://rubygems.org/pages/download</a></p>
]]></content>
  </entry>
  
</feed>

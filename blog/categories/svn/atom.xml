<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SVN | 杜永文 博客]]></title>
  <link href="http://duyw.github.io/blog/categories/svn/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-02-25T14:45:53+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04下 SVN 安装和配置]]></title>
    <link href="http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04xia-svn-an-zhuang-he-pei-zhi/"/>
    <updated>2013-04-05T20:30:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04xia-svn-an-zhuang-he-pei-zhi</id>
    <content type="html"><![CDATA[<h3>1. 安装</h3>

<p><code>
sudo apt-get install subversion
</code></p>

<h3>2. 将最新版本文件签出到本地</h3>

<p><code>
svn checkout repository_path local_path --username 用户名  --password 密码
</code></p>

<p>例如：</p>

<p><code>
$ svn checkout svn://192.168.1.1/pro  --username 用户名 --password 密码
</code></p>

<p><code>
$ svn checkout http://192.168.1.1/pro --username 用户名 --password 密码
</code></p>

<p>简写：<code>$ svn co svn://192.168.1.1/pro</code>或者 <code>$ svn co http://192.168.1.1/pro</code></p>

<p>注：--password 参数传输密码的话，会提示输入密码。local_path  参数如果为空的话，会签出到当前目录。</p>

<h3>3. 导出(导出一个干净的不带.svn文件夹的目录树)</h3>

<p><code>
svn export [-r 版本号] http://路径(目录或文件的全路径) [本地目录全路径] --username 用户名
svn export [-r 版本号] svn://路径(目录或文件的全路径)  [本地目录全路径] --username 用户名
svn export 本地检出的(即带有.svn文件夹的)目录全路径  要导出的本地目录全路径
</code></p>

<p>例子：</p>

<p><code>
svn export svn://192.168.0.3/测试工具 /home/testtools --username ivan
svn export http://192.168.0.3/test/testapp --username ivan
svn export /home/testapp /home/testtools
</code></p>

<p>注：</p>

<p>第一种从版本库导出干净工作目录树的形式是指定URL，如果指定了修订版本号，会导出相应的版本，如果没有指定修订版本，则会导出最新的，导出到指定位置。</p>

<p>如果省略 本地目录全路径，URL的最后一部分会作为本地目录的名字。</p>

<p>第二种形式是指定 本地检出的目录全路径 到 要导出的本地目录全路径，所有的本地修改将会保留，但是不在版本控制下(即没提交的新文件，因为.svn文件夹里没有与之相关的信息记录)的文件不会拷贝。</p>

<!-- more -->


<h3>4. 往版本库中添加新的文件</h3>

<p><code>$ svn add file</code> 告诉SVN服务器要添加文件了，还要用<code>svn commint -m</code>真实的上传上去！</p>

<p>例如：</p>

<p><code>
$ svn add test.php   #(添加test.php)   
$ svn add *.php      #(添加当前目录下所有的php文件)
</code></p>

<h3>5. 提交</h3>

<p><code>
svn commit -m “提交备注信息文本“ [-N] [--no-unlock] 文件名
svn ci     -m “提交备注信息文本“ [-N] [--no-unlock] 文件名
</code></p>

<p>必须带上-m参数，参数可以为空，但是必须写上-m</p>

<p>例子：</p>

<p><code>
svn commit -m “提交当前目录下的全部在版本控制下的文件“ *    #注意这个*表示全部文件
svn commit -m “提交我的测试用test.php“ test.php
svn commit -m “提交我的测试用test.php“ -N --no-unlock test.php    #保持锁就用–no-unlock开关
</code></p>

<p><code>
svn ci -m “提交当前目录下的全部在版本控制下的文件“ *    #注意这个*表示全部文件
svn ci -m “提交我的测试用test.php“ test.php
svn ci -m “提交我的测试用test.php“ -N --no-unlock test.php    #保持锁就用–no-unlock开关
</code></p>

<h3>6. 更新文件</h3>

<p><code>
svn update
svn update -r 修正版本 文件名
svn update 文件名
</code></p>

<p>例子：</p>

<p><code>
svn update                    # 后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本
svn update -r 200 test.cpp    # 将版本库中的文件 test.cpp 还原到修正版本（revision）200
svn update test.php           # 更新与版本库同步。
</code>
注：提交的时候提示过期冲突，需要先 update 修改文件，然后清除 svn resolved，最后再commit。</p>

<h3>7. 删除文件</h3>

<p><code>
svn delete svn://路径(目录或文件的全路径) -m “删除备注信息文本”
</code></p>

<p>推荐如下操作：</p>

<p><code>
svn delete 文件名  svn ci -m “删除备注信息文本”
</code></p>

<p>例子：</p>

<p><code>
svn delete svn://192.168.1.1/testapp/test.php -m “删除测试文件test.php”
</code></p>

<p>推荐如下操作：</p>

<p><code>
svn delete test.php  svn ci -m “删除测试文件test.php”
</code></p>

<h3>8. 加锁/解锁</h3>

<p><code>
svn lock -m “加锁备注信息文本“ [--force] 文件名  
svn unlock 文件名
</code></p>

<p>例子：</p>

<p><code>
svn lock -m “锁信测试用test.php文件“ test.php  
svn unlock test.php
</code></p>

<h3>9. 比较差异</h3>

<p><code>
svn diff 文件名  
svn diff -r 修正版本号m:修正版本号n 文件名
</code></p>

<p>例子：</p>

<p><code>
svn diff test.php              # 将修改的文件与基础版本比较
svn diff -r 200:201 test.php   # 对 修正版本号200 和 修正版本号201 比较差异
</code></p>

<h3>10. 查看文件或者目录状态</h3>

<p><code>
svn st     目录路径/名
svn status 目录路径/名   #目录下的文件和子目录的状态，正常状态不显示
</code></p>

<p>说明：  ?：不在svn的控制中；  M：内容被修改；C：发生冲突； A：预定加入到版本库；K：被锁定</p>

<p><code>
svn  -v 目录路径/名
svn status -v 目录路径/名    #显示文件和子目录状态
</code></p>

<p>说明：第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人</p>

<p>注：
svn status、svn diff 和 svn revert 这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝（但不是所有历史版本的拷贝，这点和GIT是不同的）。</p>

<h3>11. 查看日志</h3>

<p><code>
svn log 文件名
</code></p>

<p>例子：</p>

<p><code>
svn log test.php  #显示这个文件的所有修改记录，及其版本号的变化
</code></p>

<h3>12. 查看文件详细信息</h3>

<p><code>
svn info 文件名
</code></p>

<p>例子：</p>

<p><code>
svn info test.php
</code></p>

<h3>13. SVN 帮助</h3>

<p><code>
svn help          # 全部功能选项
svn help ci      # 具体功能的说明
</code></p>

<h3>14. 查看版本库下的文件和目录列表</h3>

<p><code>
svn list svn://路径(目录或文件的全路径)
svn ls   svn://路径(目录或文件的全路径)
</code></p>

<p>例子：</p>

<p><code>
svn list svn://192.168.0.3/test
svn ls   svn://192.168.0.3/test   # 显示svn://192.168.0.3/test目录下的所有属于版本库的文件和目录
</code></p>

<h3>15. 创建纳入版本控制下的新目录</h3>

<p><code>
svn mkdir 目录名
svn mkdir -m "新增目录备注文本" http://目录全路径
</code></p>

<p>例子：</p>

<p><code>
svn mkdir newdir
svn mkdir -m "Making a new dir." http://192.168.0.3/test/newdir  
</code></p>

<p>注：添加完子目录后，一定要回到根目录更新一下，不然在该目录下提交文件会提示“提交失败”</p>

<p><code>
svn update
</code></p>

<p>注：如果手工在checkout出来的目录里创建了一个新文件夹newsubdir，再用svn mkdir newsubdir命令后，SVN会提示：</p>

<pre><code>svn: 尝试用 “svn add”或 “svn add --non-recursive”代替？
svn: 无法创建目录“hello”: 文件已经存在
</code></pre>

<p>此时，用如下命令解决：<code>svn add --non-recursive newsubdir</code></p>

<p>再次进入这个newsubdir文件夹，用<code>ls -a</code>查看它下面的全部目录与文件，会发现多了：.svn目录</p>

<p>再用 <code>svn mkdir -m "添hello功能模块文件" svn://192.168.0.3/test/newdir/newsubdir</code> 命令，SVN提示：</p>

<pre><code>svn: File already exists: filesystem '/data/svnroot/test/db', transaction '4541-1',
path '/newdir/newsubdir '
</code></pre>

<h3>16. 恢复本地修改</h3>

<p><code>
svn revert [--recursive] 文件名
</code></p>

<p>注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。</p>

<p>例子：</p>

<p><code>
svn revert foo.c            # 丢弃对一个文件的修改
svn revert --recursive .    # 恢复一整个目录的文件，. 为当前目录
</code></p>

<h3>17. 把工作拷贝更新到别的URL</h3>

<p><code>
svn switch http://目录全路径 本地目录全路径
</code></p>

<p>例子：</p>

<p><code>
svn switch http://192.163.0.3/test/456 . #(原为123的分支)当前所在目录分支到192.163.0.3/test/456
</code></p>

<h3>18. 解决冲突</h3>

<p><code>
svn resolved [本地目录全路径]
</code></p>

<p>例子：</p>

<p><code>
$ svn update
C foo.c
Updated to revision 31.
</code></p>

<p>如果你在更新时得到冲突，你的工作拷贝会产生三个新的文件：</p>

<p><code>  
$ ls
foo.c
foo.c.mine
foo.c.r30
foo.c.r31
</code></p>

<p>当你解决了foo.c的冲突，并且准备提交，运行svn resolved让你的工作拷贝知道你已经完成了所有事情。 你可以仅仅删除冲突的文件并且提交，但是svn resolved除了删除冲突文件，还修正了一些记录在工作拷贝管理区域的记录数据，所以我们推荐你使用这个命令。</p>

<h3>19. 不checkout而查看输出特定文件或URL的内容</h3>

<p><code>
svn cat http://文件全路径
</code></p>

<p>例子： <code>svn cat http://192.168.0.3/test/readme.txt</code></p>

<p>另外，在Linxu下，可视化SVN客户端可以用 Rabbitvcs 。</p>
]]></content>
  </entry>
  
</feed>

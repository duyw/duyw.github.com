<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 部署 | 杜永文 博客]]></title>
  <link href="http://duyw.github.io/blog/categories/deploy/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-02-25T16:20:24+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[windows 平台部署rails]]></title>
    <link href="http://duyw.github.io/blog/2010/11/19/windows-ping-tai-bu-shu-rails/"/>
    <updated>2010-11-19T18:33:00+08:00</updated>
    <id>http://duyw.github.io/blog/2010/11/19/windows-ping-tai-bu-shu-rails</id>
    <content type="html"><![CDATA[<p>　　公司一个现有项目是用 ruby 1.8.6 + rails1.2.6 做的，之前的客户服务器都是linux系统，这次客户服务器用的是windows，所以研究了一下部署方案，从网上各方搜集资料，最后配置成功，整理在此：</p>

<h3>1. mongrel 安装</h3>

<p>由于默认的gem版本为0.9.4，版本太旧了，无法运行gem install mongrel 命令，所以要先升级gem版本，首先下载 rubygem_update ,地址：http://rubyforge.org/frs/download.php/70695/rubygems-update-1.3.7.gem</p>

<p>下载后在cmd下cd到rubygems-update-1.3.7.gem所在的目录</p>

<p>安装命令：<code>gem install rubygems-update-1.3.7.gem</code></p>

<p>接下来升级gem，命令：<code>update_rubygems</code></p>

<p>安装完成后 查看gem版本，输入 <code>gem -v</code> 会显示 “1.3.7”，至此，升级成功。</p>

<p>安装mongrel，运行命令：<code>gem install mongrel</code></p>

<p>安装完成后，在rail项目下运行 <code>ruby script/server</code> 启动时，会使用mongrel而不是webrake。</p>

<!-- more -->


<h3>2. 安装mongrel_service</h3>

<p>命令：<code>gem install mongrel_service</code></p>

<h3>3. 将mongrel设置为系统服务</h3>

<p>命令：<code>mongrel_rails service::install -N zc0 -c d:\svn\zc_hn\code\zc -p 3000 -e development</code></p>

<p>（zc0为服务名称，d:\svn\zc_hn\code\zc 为项目路径，development为开发模式，3000为端口）</p>

<p>执行后在系统服务中会增加一项名为zc的服务。</p>

<p>启动：<code>net start zc0</code></p>

<p>关闭：<code>net stop zc0</code></p>

<p>删除服务：先关闭，然后命令行执行：<code>mongrel_rails service::remove -N zc0</code></p>

<p>如果需要安装多个mongrel实例，那么可以这样：</p>

<p><code>
mongrel_rails service::install -N zc0 -c d:\svn\zc_hn\code\zc -p 3000 –e production
mongrel_rails service::install -N zc1 -c d:\svn\zc_hn\code\zc -p 3001 –e production
……
</code></p>

<h3>4. 安装、配置 apache</h3>

<p>从Apache网站下载Windows版本的Apache2.2，运行安装。</p>

<p>安装后进入安装目录下修改 httpd.conf文件,将以下三个模块的注释去掉</p>

<p>```
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule proxy_http_module modules/mod_proxy_http.so</p>

<p>```</p>

<p>如果你希望对页面输出使用压缩，也需要取消如下模块的注释：</p>

<p><code>LoadModule deflate_module modules/mod_deflate.so</code></p>

<p>然后按如下内容配置基于HTTP代理的负载均衡，在最后添加：</p>

<p>```
 ProxyRequests Off</p>

<p>  BalancerMember http://localhost:3000  <br/>
  BalancerMember http://localhost:3001</p>

<p>  ServerName www.xxx.com  <br/>
  DocumentRoot d:/svn/zc_hn/code/zc/  <br/>
  ProxyPass images !  <br/>
  ProxyPass stylesheets !  <br/>
  ProxyPass javascripts !  <br/>
  ProxyPass / balancer://myCluster/  <br/>
  ProxyPassReverse / balancer://myCluster/  <br/>
  ProxyPreserveHost on  <br/>
```</p>

<p>(网上的资料中在images 前面有"/",访问的时候页面图片css都没了，只有数据，去掉后正常)</p>

<hr />

<p>myCluster定义了群集中的每个mongrel应用服务器节点。ProxyPass /images !指明该URL开始的请求不代理给Mongrel群集，而由Apache自己处理。重起Apache，然后打开浏览器访问www.xxx.com，检查配置是否正确。</p>

<p>至此，在Windows Server上面一个具备良好稳定性和性能的Ruby on rails生产环境就搭建好了。</p>

<p>对于页面输出，还可以使用mod_deflate进行输出内容压缩，以提高页面下载速度，这个就留给大家自己配置了。</p>
]]></content>
  </entry>
  
</feed>

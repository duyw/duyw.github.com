<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[杜永文 博客]]></title>
  <link href="http://duyw.github.io/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-02-25T16:20:24+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyGems 笔记之二]]></title>
    <link href="http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-er/"/>
    <updated>2014-02-10T20:13:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-er</id>
    <content type="html"><![CDATA[<h3>gem的结构</h3>

<p>1  每一个gem都要有名称、版本、运行环境。以rake 0.8.7 为例，其名称&#8217;rake&#8217;,版本&#8217;1.8.7&#8217;,运行平台是ruby，意味着可以运行在任何ruby平台上。</p>

<p>2 运行环境是基于CPU架构、操作系统之上，有时候还会受限于操作系统的版本。</p>

<p>3 在gem中包含以下组件
  代码：（包括测试和辅助程序）
  文档
  gemspec（gem的自述文件）</p>

<p>每一个gem包的代码结构组织都遵循统一的标准</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tree freewill
</span><span class='line'>freewill/
</span><span class='line'>├── bin/
</span><span class='line'>│   └── freewill
</span><span class='line'>├── lib/
</span><span class='line'>│   └── freewill.rb
</span><span class='line'>├── test/
</span><span class='line'>│   └── test_freewill.rb
</span><span class='line'>├── README
</span><span class='line'>├── Rakefile
</span><span class='line'>└── freewill.gemspec</span></code></pre></td></tr></table></div></figure>


<p>如上所示，一个gem包含的主要组件有：</p>

<p><code>lib</code>目录：包含gem的代码</p>

<p><code>test</code>目录或<code>spec</code>目录，包含测试代码，取决于开发者用的是哪个测试框架。</p>

<p><code>Rakefile</code>文件：rake程序使用该文件进行自动化测试，生成代码或者执行其他任务。</p>

<p><code>bin</code>目录：当gem安装好以后，bin目录将添加到用户的环境变量中去。</p>

<p>文档通常在<code>README</code>中或者在代码的注释里面。当gem安装完成的时候，文档也会为你自动生成好，大部分gem包含RDoc文档，也有用YARD的。</p>

<p><code>gemspec</code>文件，该文件的内容包含了文档相关的信息。</p>

<h3>The Gemspec</h3>

<p>gemspec文件包含了文档的名称、作者、版本等相关的信息，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat freewill.gemspec
</span><span class='line'>Gem::Specification.new do |s|
</span><span class='line'>  s.name        = 'freewill'
</span><span class='line'>  s.version     = '1.0.0'
</span><span class='line'>  s.summary     = "Freewill!"
</span><span class='line'>  s.description = "I will choose Freewill!"
</span><span class='line'>  s.authors     = ["Nick Quaranto"]
</span><span class='line'>  s.email       = 'nick@quaran.to'
</span><span class='line'>  s.homepage    = 'http://example.com/freewill'
</span><span class='line'>  s.files       = ["lib/freewill.rb", ...]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>更多gemspec相关内容参看<a href="http://guides.rubygems.org/specification-reference/">http://guides.rubygems.org/specification-reference/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyGems 笔记之一]]></title>
    <link href="http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-yi/"/>
    <updated>2014-02-10T18:46:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/02/10/rubygems-bi-ji-zhi-yi</id>
    <content type="html"><![CDATA[<h2>简介：</h2>

<hr />

<ol>
<li><p>ruby的软件包称为 &#8216;gem&#8217;, 类似与java的jar包。ruby的gem包用来拓展或修改ruby应用程序的函数，通常将一些可复用的函数打包成gem，作为库与方便与其他开发者共享。有的gem提供了命令行工具来实现 automate tasks ，提升你的工作效率。</p></li>
<li><p>RubyGems是用于管理gem工具，可以方便的下载、安装、使用和卸载gem。</p></li>
<li><p><code>gem</code> 命令用于管理RubyGems。Ruby1.9 以及后来的版本都默认集成了RubyGmes，安装完ruby以后，就可以直接使用 gem 命令。</p></li>
</ol>


<h2>使用</h2>

<hr />

<h3>一、 查找Gems：</h3>

<p><code>search</code> 命令用于查找远程的gem包。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›  
</span><span class='line'>╰─$ gem searc\^rails  
</span><span class='line'>
</span><span class='line'>*** REMOTE GEMS ***
</span><span class='line'>
</span><span class='line'>rails (4.0.2)
</span><span class='line'>rails-3-settings (0.1.1)
</span><span class='line'>rails-action-args (0.1.1)
</span><span class='line'>rails-admin (0.0.0)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><code>-d</code> 参数可以查看更加详细的信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›  
</span><span class='line'>╰─$ gem search  \^rails\$ -d
</span><span class='line'>
</span><span class='line'>*** REMOTE GEMS ***
</span><span class='line'>
</span><span class='line'>rails (4.0.2)
</span><span class='line'>    Author: David Heinemeier Hansson
</span><span class='line'>    Homepage: http://www.rubyonrails.org
</span><span class='line'>
</span><span class='line'>    Full-stack web application framework.</span></code></pre></td></tr></table></div></figure>


<p>其他参数， 参考 <code>gem search --help</code></p>

<h3>二、 安装Gems</h3>

<p><code>install</code> 命令用于安装gems。</p>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install rails -v= 4.0 --no-rdoc --no-ri</span></code></pre></td></tr></table></div></figure>


<h3>三、Requiring code</h3>

<p>RubyGems 修改了Ruby的加载路径，并且控制如何查找require进来的ruby代码。当require一个gem的时候，会将这个gem的路径添加到全局变量<code>$LOAD_PATH</code>中。</p>

<p>在启动irb的时候，通过 <code>-r</code> 参数可以指定要加载的gem：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›  
</span><span class='line'>╰─$ irb -rpp 
</span><span class='line'>irb(main):001:0&gt;  pp $LOAD_PATH
</span><span class='line'>["/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0/i686-linux",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0/i686-linux",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/i686-linux"]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>默认只加载几个必要的标准库，如果要加载指定的gem：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0@19wu›  
</span><span class='line'>╰─$ irb -rpp 
</span><span class='line'>irb(main):001:0&gt; require 'rails'
</span><span class='line'>=&gt; true
</span><span class='line'>irb(main):002:0&gt;  pp $LOAD_PATH
</span><span class='line'>["/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/i18n-0.6.5/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/multi_json-1.7.9/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/tzinfo-0.3.37/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/atomic-1.1.12/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/thread_safe-0.1.2/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/activesupport-4.0.0/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/builder-3.1.4/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/rack-1.5.2/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/rack-test-0.6.2/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/erubis-2.7.0/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/actionpack-4.0.0/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/thor-0.18.1/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/railties-4.0.0/lib",
</span><span class='line'> "/home/ivan/.rvm/gems/ruby-2.0.0-p353@19wu/gems/json-1.8.0/lib",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby/2.0.0/i686-linux",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/site_ruby",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby/2.0.0/i686-linux",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/vendor_ruby",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0",
</span><span class='line'> "/home/ivan/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/i686-linux"]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>注意： 如果您使用的是 ruby 1.8 版本，在引入任何gem之前，需要先引入 rubygems： <code>require 'rubygems'</code>，在某gem所在目录的lib目录下，必须存在一个rb文件和一个目录，要求名称和gem的名称一致。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tree freewill/
</span><span class='line'>freewill/
</span><span class='line'>└── lib/
</span><span class='line'>    ├── freewill/
</span><span class='line'>    │   ├── user.rb
</span><span class='line'>    │   ├── widget.rb
</span><span class='line'>    │   └── ...
</span><span class='line'>    └── freewill.rb</span></code></pre></td></tr></table></div></figure>


<h3>四、 列举出所有已经安装好的gem</h3>

<p><code>list</code> 命令可以列举出所有已经安装好个gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>╭─# ivan@ubuntu in ~/private/19wu ‹ruby-2.0.0›  
</span><span class='line'>╰─$ gem list
</span><span class='line'>
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>bigdecimal (1.2.0)
</span><span class='line'>gem-wrappers (1.2.4)
</span><span class='line'>io-console (0.4.2)
</span><span class='line'>json (1.7.7)
</span><span class='line'>minitest (4.3.2)
</span><span class='line'>psych (2.0.0)
</span><span class='line'>rake (0.9.6)
</span><span class='line'>rdoc (4.0.0)
</span><span class='line'>test-unit (2.0.0.0)
</span></code></pre></td></tr></table></div></figure>


<h3>五、 卸载Gems</h3>

<p><code>uninstall</code> 命令用于卸载已经安装的gem包。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem uninstall drip
</span><span class='line'>Successfully uninstalled drip-0.0.2</span></code></pre></td></tr></table></div></figure>


<p>如果你要卸载一个被其他gem依赖的gem，会要求进行确认：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem uninstall rbtree
</span><span class='line'>
</span><span class='line'>You have requested to uninstall the gem:
</span><span class='line'>  rbtree-0.4.1
</span><span class='line'>
</span><span class='line'>drip-0.0.2 depends on rbtree (&gt;= 0)
</span><span class='line'>If you remove this gem, these dependencies will not be met.
</span><span class='line'>Continue with Uninstall? [yN]  n
</span><span class='line'>ERROR:  While executing gem ... (Gem::DependencyRemovalException)
</span><span class='line'>    Uninstallation aborted due to dependent gem(s)</span></code></pre></td></tr></table></div></figure>


<h3>六、 查看gem文档</h3>

<p><code>ri</code> 命令可以用于查看gem的文档。或者运行 <code>gem server</code> 通过浏览器查看</p>

<h3>七、 Fetching and Unpacking Gems</h3>

<p>如果你仅仅想获取并查看一个gem的内容，可以通过<code>fetch</code>和<code>unpack</code>命令来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›  
</span><span class='line'>╰─$ gem fetch json
</span><span class='line'>Fetching: json-1.1.5-x86-linux.gem (100%)
</span><span class='line'>Downloaded json-1.1.5-x86-linux
</span><span class='line'>
</span><span class='line'>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›  
</span><span class='line'>╰─$ ls   
</span><span class='line'>json-1.1.5-x86-linux.gem
</span><span class='line'>
</span><span class='line'>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›  
</span><span class='line'>╰─$ gem unpack json-1.1.5-x86-linux.gem 
</span><span class='line'>Unpacked gem: '/home/ivan/private/temp/json-1.1.5-x86-linux'
</span><span class='line'>
</span><span class='line'>╭─# ivan@ubuntu in ~/private/temp ‹ruby-1.8.7@rails304›  
</span><span class='line'>╰─$ ls
</span><span class='line'>json-1.1.5-x86-linux  json-1.1.5-x86-linux.gem</span></code></pre></td></tr></table></div></figure>


<p>以上内容参考：</p>

<p><a href="http://guides.rubygems.org/rubygems-basics/">http://guides.rubygems.org/rubygems-basics/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正确使用label标签]]></title>
    <link href="http://duyw.github.io/blog/2014/01/29/zheng-que-shi-yong-labelbiao-qian/"/>
    <updated>2014-01-29T20:34:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/29/zheng-que-shi-yong-labelbiao-qian</id>
    <content type="html"><![CDATA[<p>表单中使用 checkbox 的时候，经常见到这样这样的写法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span><span class="nt">&gt;</span> Click Me!
</span></code></pre></td></tr></table></div></figure>


<p>这种写法选择的时候只能点击复选框，如果要实现点击文字“Click Me!” 也能进行选择操作，应该这么写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;label&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span><span class="nt">&gt;</span> Click Me!<span class="nt">&lt;/label&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">id=</span><span class="s">&quot;ckbx&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">ckbx&quot;</span><span class="nt">&gt;</span>Click Me!<span class="nt">&lt;/label&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我有强迫症，看到项目中不规范的写法就忍不住会给改过来，在一次内部分享中我专门分享了这点，但是还有人这么写，抓狂！</p>

<p>偶然一次发现京东商城的登陆页面有个“自动登录”的checkbox，点击文字的时候就没有选中，每次上京东都会去点一下看改过来没有，即使自动登录了我也会退出重新登陆，持续了快一年了&#8230;&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 导出CSV]]></title>
    <link href="http://duyw.github.io/blog/2014/01/29/rails-dao-chu-csv/"/>
    <updated>2014-01-29T20:21:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/29/rails-dao-chu-csv</id>
    <content type="html"><![CDATA[<p>rails项目中经常有生成Excel文件需求，完成这一功能的可选插件也很多，比较常用的有 roo ，spreadsheet 等，如果遇到导出大量数据的场景，这些插件就捉襟见肘了，捉襟见肘 因为速度实在无法忍受。比较好的解决法案是生成csv文件，这样做的好处是文件体积小，生成速度快，不受行数限制，此外csv文件可以用excel打开。</p>

<p>注意点：</p>

<p>1 导出的UTF-8格式的csv直接用excle打开会出现乱码，需要进行转码操作，如果在导出之前转码，速度也很慢，比较好的做法是生成以后再转码（可以用windows的文本编辑器另存为ANSI编码）。</p>

<p>2 尽量避免将大量数据读取到ruby对象中，应该使用<code>find_each</code>方法,<code>:batch_size</code>参数默认是1000，这个值的设置对速度也有很大影响，我笔记本测试350较快，应该和机器配置User对象复杂程度等有关,需要测试。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">find_each</span><span class="p">(</span><span class="ss">:start</span><span class="o">=&gt;</span><span class="mi">5000</span><span class="p">,</span><span class="ss">:batch_size</span> <span class="o">=&gt;</span> <span class="mi">350</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># do something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 生成的csv的时候注意设置分隔符，目的是方便用excel直接打开</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CSV</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">clo_sep</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">row_sep</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">data</span><span class="o">|</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="s2">&quot;姓名&quot;</span><span class="p">,</span><span class="s2">&quot;电话&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="no">Users</span><span class="o">.</span><span class="n">find_by_sql</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="n">user</span><span class="o">.</span><span class="n">phone</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是从网上找到一个现成例子，使用了 fastercsv 生成csv：</p>

<figure class='code'><figcaption><span>在String类中增加一些转换字符集的方法,  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">utf8_to_gb2321</span>
</span><span class='line'>    <span class="n">encode_convert</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s2">&quot;gb2321&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">gb2321_to_utf8</span>
</span><span class='line'>    <span class="n">encode_convert</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;gb2321&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">utf8_to_utf16</span>
</span><span class='line'>    <span class="n">encode_convert</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s2">&quot;UTF-16LE&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">utf8?</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">utf8_arr</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;U*&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">true</span> <span class="k">if</span> <span class="n">utf8_arr</span> <span class="o">&amp;&amp;</span> <span class="n">utf8_arr</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">rescue</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">encode_convert</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;iconv&#39;</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">converter</span> <span class="o">=</span> <span class="no">Iconv</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">)</span>
</span><span class='line'>      <span class="n">converter</span><span class="o">.</span><span class="n">iconv</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span>
</span><span class='line'>      <span class="n">s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>导出CVS,  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">export_csv</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;fastercsv&#39;</span>
</span><span class='line'>  <span class="n">records</span> <span class="o">=</span> <span class="no">Amodel</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">csv_string</span> <span class="o">=</span> <span class="no">FasterCSV</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span><span class="ss">:col_sep</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:row_sep</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
</span><span class='line'>    <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="s1">&#39;field_name1&#39;</span><span class="p">,</span> <span class="s1">&#39;field_name2&#39;</span><span class="p">,</span> <span class="s1">&#39;field_name3&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">records</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>      <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">r</span><span class="o">.</span><span class="n">field1</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">field2</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">field3</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;export.csv&quot;</span><span class="p">,</span><span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">file</span><span class="o">.</span><span class="n">syswrite</span> <span class="s2">&quot;FFFE&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="n">csv_string</span><span class="o">.</span><span class="n">utf8_to_utf16</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>railscasts中有两个视频可以供学习：</p>

<p><a href="http://railscasts.com/episodes/362-exporting-csv-and-excel?autoplay=true">http://railscasts.com/episodes/362-exporting-csv-and-excel?autoplay=true</a></p>

<p><a href="http://railscasts.com/episodes/396-importing-csv-and-excel?autoplay=true">http://railscasts.com/episodes/396-importing-csv-and-excel?autoplay=true</a></p>

<p>其他资料：</p>

<p><a href="http://hlee.iteye.com/blog/356507">http://hlee.iteye.com/blog/356507</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何制作gem包]]></title>
    <link href="http://duyw.github.io/blog/2014/01/29/ru-he-zhi-zuo-gembao/"/>
    <updated>2014-01-29T19:45:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/29/ru-he-zhi-zuo-gembao</id>
    <content type="html"><![CDATA[<p>Rails 支持多种形式的拓展，像plugin、gem或者干脆直接将通用工具类代码放置到lib目录下。plugin已经不推荐使用了，目前来看，最好的方式就是写成gem，本文是我学习gem制作整理的笔记，文中以手动添加一个helper方法为例。</p>

<h3>第一步：安装 bundler</h3>

<p>首先通过 <code>gem list</code> 命令查看如果已经安装了bundler就可以跳过此步。</p>

<p>安装命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<h3>第二步：使用 bundler 生成一个基础gem结构</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle gem my_gem</span></code></pre></td></tr></table></div></figure>


<p>执行以后会看到以下输出：</p>

<pre><code>create  my_gem/Gemfile
create  my_gem/Rakefile
create  my_gem/LICENSE.txt
create  my_gem/README.md
create  my_gem/.gitignore
create  my_gem/my_gem.gemspec
create  my_gem/lib/my_gem.rb
create  my_gem/lib/my_gem/version.rb
Initializating git repo in /home/ivan/private/my_gem
</code></pre>

<p>说明：</p>

<ol>
<li><p><code>my_gem.gemspec</code> 文件相当于gem的说明书（specification），其中定义了Gem的内容、作者、描述、主页等信息。将来打包的时候会依赖这个文件。</p></li>
<li><p>Gem的代码主要放置在<code>lib</code>目录下。</p></li>
<li><p>整个项目加入了Git版本控制。</p></li>
<li><p>如果gem本身需要引入其他依赖的包，需要在<code>.gemspec</code>文件中指明例如:</p>

<p> <code>spec.add_development_dependency "rake"</code>  引入开发依赖</p>

<p> <code>spec.add_development_dependency "rails"</code> 引入运行依赖</p></li>
<li><p>项目中有Gemfile文件，可将其中的 source 替换成淘宝源 &#8220;http://ruby.taobao.org&#8221;。</p></li>
<li><p>另外，在Gemfile有一行内容是&#8221;gemspec&#8221;,表明该项目依赖的gem包在<code>.gemspec</code>文件中指出，这就解释了为什么会有上面第4条。</p></li>
<li><p>my_gem/lib/my_gem/version.rb 文件中可以填写gem的版本信息。</p></li>
</ol>


<h3>第三步：编写gem要实现的功能</h3>

<p>这里我们实现一个helper方法，在页面输出一段Html代码。</p>

<ol>
<li>新建文件 helper.rb , 路径： lib/my_gem/helper.rb</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># coding: utf-8
</span><span class='line'>module MyGem
</span><span class='line'>  module MyHelper
</span><span class='line'>    def my_helper
</span><span class='line'>      time = DateTime.parse(Time.now.to_s).strftime('%H:%M:%S').to_s
</span><span class='line'>      date = DateTime.parse(Time.now.to_s).strftime('%Y-%m-%d').to_s
</span><span class='line'>      html =  []
</span><span class='line'>      html &lt;&lt; '&lt;div id="mydiv"&gt;'
</span><span class='line'>      html &lt;&lt; '&lt;div id="time"&gt;' + time + '&lt;/div&gt;'
</span><span class='line'>      html &lt;&lt; '&lt;div id="date"&gt;' + date + '&lt;/div&gt;'
</span><span class='line'>      html &lt;&lt; '&lt;/div&gt;'
</span><span class='line'>      raw html.join("\n")
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ol>
<li>引入刚才写的helper</li>
</ol>


<p>修改 lib/my_gem.rb 文件，首行添加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require "my_gem/helper"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>将helper正真拓展到rails中去</li>
</ol>


<p>修改 lib/my_gem.rb 文件，尾行添加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActionView::Base.send :include, MyGem::MyHelper</span></code></pre></td></tr></table></div></figure>


<h3>第四步：提交代码</h3>

<p>将项目提交到Git仓库，用到的命令：</p>

<pre><code>git add *

git commit -m "finish my gem"
</code></pre>

<p>这一步很重要，因为在<code>.gemspec</code>文件中有这么一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec.files         = `git ls-files`.split($/)</span></code></pre></td></tr></table></div></figure>


<p>它调用了 <code>git ls-files</code> 命令来获取需要打包的文件，而这一命令只会返回Git仓库中的所有的文件，如果我们不提交代码那么项目中新建的文件就不会被打包进来。</p>

<h3>第五步：打包</h3>

<p>在项目下执行命令 <code>gem build my_gem.gemspec</code></p>

<pre><code>WARNING:  no homepage specified
  Successfully built RubyGem
  Name: my_gem
  Version: 0.0.1
  File: my_gem-0.0.1.gem
</code></pre>

<p>这里有一个警告，提醒我们填写homepage，这里只是练习不做理会。</p>

<h3>第六步：使用</h3>

<p>使用方法和其他gem包一样,需要注意的是我们的gem包并没有发布到rubygems.org，所以 gem install 的时候在my_gem-0.0.1.gem 文件所在的目录执行就ok了。</p>

<ol>
<li><p>安装： <code>gem install my_gem-0.0.1.gem</code></p></li>
<li><p>在rails项目的Gemfile中添加 <code>gem "my_gem"</code></p></li>
<li><p>在rails项目下运行命令 &#8216;bundle&#8217;</p></li>
<li><p>在erb页面直接调用： <code>&lt;%= my_helper %&gt;</code> 。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 常用函数]]></title>
    <link href="http://duyw.github.io/blog/2014/01/29/postgresql-chang-yong-han-shu/"/>
    <updated>2014-01-29T00:09:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/29/postgresql-chang-yong-han-shu</id>
    <content type="html"><![CDATA[<h3>一 常用数学操作符</h3>

<pre><code>%    模      5 % 4      1
^    幂      2.0 ^ 3.0  8
|/   平方根  |/ 25.0     5
||/  立方根  ||/ 27.0    3
!    阶乘    5 !        120
!!   阶乘    !! 5       120
@    绝对值   @ -5.0     5
</code></pre>

<h3>二 常用数学函数</h3>

<p>取绝对值： <code>abs()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">);</span> <span class="c1">-- 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>求余数： <code>mod(x,y)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">mod</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c1">--1</span>
</span></code></pre></td></tr></table></div></figure>


<p>平方根： <code>sqrt()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">-- 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>立方根： <code>cbrt()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">cbrt</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">--2</span>
</span></code></pre></td></tr></table></div></figure>


<p>随机数： <code>random()</code>, 0.0 到 1.0 之间</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">random</span><span class="p">();</span> <span class="c1">-- 0.527410356327891</span>
</span></code></pre></td></tr></table></div></figure>


<p>不小于参数的最小的整数： <code>cell()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">cell</span><span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">.</span><span class="mi">8</span><span class="p">);</span> <span class="c1">-- -42</span>
</span></code></pre></td></tr></table></div></figure>


<p>不大于参数的最大整数: <code>floor()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">floor</span><span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">.</span><span class="mi">8</span><span class="p">);</span> <span class="c1">-- -43`</span>
</span></code></pre></td></tr></table></div></figure>


<h3>三 字符串函数</h3>

<p>字符串连接： <code>string || string</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="s1">&#39;ruby&#39;</span> <span class="o">||</span> <span class="s1">&#39;china&#39;</span> <span class="p">;</span> <span class="c1">-- rubychina</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>字符串长度： <code>length()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">length</span><span class="p">(</span><span class="s1">&#39;i love you&#39;</span><span class="p">)</span> <span class="p">;</span> <span class="c1">-- 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串转小写： <code>lower()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">lower</span><span class="p">(</span><span class="s1">&#39;RUBY&#39;</span><span class="p">);</span> <span class="c1">-- ruby</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串转大写： <code>upper()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">upper</span><span class="p">(</span><span class="s1">&#39;rails&#39;</span><span class="p">);</span> <span class="c1">-- RAILS</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串每个单词的第一个子母转为大写： <code>initcap()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">initcap</span><span class="p">(</span><span class="s1">&#39;ruby on rails&#39;</span><span class="p">);</span> <span class="c1">-- Ruby on Rails</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串替换： <code>overlay(string placing string from int [for int])</code> 和</p>

<p><code>replace(string text, from text, to text)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">overlay</span><span class="p">(</span><span class="s1">&#39;Ruby_______Rails&#39;</span> <span class="k">placing</span> <span class="s1">&#39; on &#39;</span> <span class="k">from</span> <span class="mi">5</span> <span class="k">for</span> <span class="mi">7</span><span class="p">)</span><span class="err">；</span><span class="c1">-- Ruby on Rails</span>
</span><span class='line'><span class="k">select</span> <span class="k">replace</span><span class="p">(</span><span class="s1">&#39;Ruby_______Rails&#39;</span><span class="p">,</span> <span class="s1">&#39;_______&#39;</span><span class="p">,</span> <span class="s1">&#39; on &#39;</span><span class="p">);</span> <span class="c1">-- Ruby on Rails`</span>
</span></code></pre></td></tr></table></div></figure>


<p>截取字符串： <code>substring(string [from int] [for int])</code> 和 <code>substr(string, from [, count])</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="s1">&#39;Ruby on Rails&#39;</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">-- Ruby</span>
</span><span class='line'><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="s1">&#39;Ruby on Rails&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>        <span class="c1">-- Ruby</span>
</span><span class='line'><span class="k">select</span> <span class="n">substr</span><span class="p">(</span><span class="s1">&#39;Ruby on Rails&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>           <span class="c1">-- Ruby</span>
</span><span class='line'><span class="k">select</span> <span class="n">substr</span><span class="p">(</span><span class="s1">&#39;Ruby on Rails&#39;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>              <span class="c1">-- on Rails</span>
</span><span class='line'><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="s1">&#39;foobar&#39;</span> <span class="k">from</span> <span class="s1">&#39;%#&quot;o_b#&quot;%&#39;</span> <span class="k">FOR</span> <span class="s1">&#39;#&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">-- oob  (这里#是转义符，双引号内的模式是返回部分)</span>
</span></code></pre></td></tr></table></div></figure>


<p>子字符串位置 <code>position(substring in string)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">position</span><span class="p">(</span><span class="s1">&#39;ruby-china&#39;</span><span class="p">,</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">-- 5 (利用这个特性可以用于判断字符串中是否包含某个子字符串)</span>
</span></code></pre></td></tr></table></div></figure>


<p>去除首位空格：<code>trim(string)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">trim</span><span class="p">(</span><span class="s1">&#39;    ruby    &#39;</span><span class="p">);</span>  <span class="c1">-- &#39;ruby&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>去除左边空格/字符： <code>ltrim(string text [, characters text])</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">ltrim</span><span class="p">(</span><span class="s1">&#39;    ruby&#39;</span><span class="p">)</span> <span class="c1">-- ruby</span>
</span><span class='line'><span class="k">select</span> <span class="n">ltrim</span><span class="p">(</span><span class="s1">&#39;__ruby&#39;</span><span class="p">,</span><span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="c1">-- ruby</span>
</span></code></pre></td></tr></table></div></figure>


<p>去除右边空格/字符： <code>rtrim(string text [, characters text])</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">rtrim</span><span class="p">(</span><span class="s1">&#39;ruby    &#39;</span><span class="p">)</span>    <span class="c1">-- ruby</span>
</span><span class='line'><span class="k">select</span> <span class="n">rtrim</span><span class="p">(</span><span class="s1">&#39;ruby__&#39;</span><span class="p">,</span><span class="s1">&#39;_&#39;</span><span class="p">)</span>  <span class="c1">-- ruby</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取字符串的 MD5 值：<code>md5()</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">md5</span><span class="p">(</span><span class="s1">&#39;ruby&#39;</span><span class="p">);</span> <span class="c1">-- 58e53d1324eef6265fdb97b08ed9aadf</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串分割： <code>split_part(string text, delimiter text, field int)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">split_part</span><span class="p">(</span><span class="s1">&#39;i||love||you&#39;</span><span class="p">,</span> <span class="s1">&#39;||&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">-- love</span>
</span></code></pre></td></tr></table></div></figure>


<h3>四 模式匹配</h3>

<h4>Like</h4>

<p>用法举例</p>

<pre><code>'abc' LIKE 'abc'    true
'abc' LIKE 'a%'     true
'abc' LIKE '_b_'    true
'abc' LIKE 'c'      false  
</code></pre>

<p>下划线(_)代表匹配任何单个字符，而一个百分号(%)匹配任何零或更多字符，如：</p>

<h4>SIMILAR TO正则表达式</h4>

<p>SIMILAR TO根据模式是否匹配给定的字符串而返回真或者假。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">string</span> <span class="k">SIMILAR</span> <span class="k">TO</span> <span class="n">pattern</span> <span class="p">[</span><span class="k">ESCAPE</span> <span class="k">escape</span><span class="o">-</span><span class="nb">character</span><span class="p">]</span>
</span><span class='line'><span class="n">string</span> <span class="k">NOT</span> <span class="k">SIMILAR</span> <span class="k">TO</span> <span class="n">pattern</span> <span class="p">[</span><span class="k">ESCAPE</span> <span class="k">escape</span><span class="o">-</span><span class="nb">character</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>它和LIKE非常类似，支持LIKE的通配符(&#8216;_&#8217;和&#8217;%&#8217;)且保持其原意。除此之外，SIMILAR TO还支持一些自己独有的元字符，如：</p>

<ol>
<li><p>| 标识选择(两个候选之一)。</p></li>
<li><ul>
<li>表示重复前面的项零次或更多次。</li>
</ul>
</li>
<li><ul>
<li>表示重复前面的项一次或更多次。</li>
</ul>
</li>
<li><p>可以使用圆括弧()把项组合成一个逻辑项。</p></li>
<li><p>一个方括弧表达式[&#8230;]声明一个字符表，就像POSIX正则表达式一样。</p></li>
</ol>


<p>见如下示例：</p>

<pre><code>'abc' SIMILAR TO 'abc'            -- true
'abc' SIMILAR TO 'a'              -- false
'abc' SIMILAR TO '%(b|d)%'        -- true
'abc' SIMILAR TO '(b|c)%'         -- false
</code></pre>

<p>带三个参数的substring，substring(string from pattern for escape-character)，提供了一个从字串中抽取一个匹配SQL正则表达式模式的子字串的函数。和SIMILAR TO一样，声明的模式必须匹配整个数据串，否则函数失效并返回NULL。为了标识在成功的时候应该返回的模式部分，模式必须出现后跟双引号(&#8220;)的两个转 义字符。匹配这两个标记之间的模式的字串将被返回，如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">substring</span><span class="p">(</span><span class="s1">&#39;foobar&#39;</span> <span class="k">from</span> <span class="s1">&#39;%#&quot;o_b#&quot;%&#39;</span> <span class="k">FOR</span> <span class="s1">&#39;#&#39;</span><span class="p">);</span> <span class="c1">-- oob</span>
</span></code></pre></td></tr></table></div></figure>


<h4>用于日期/时间格式化的模式</h4>

<pre><code>模式    描述
HH     一天的小时数(01-12)
HH12   一天的小时数(01-12)
HH24   一天的小时数(00-23)
MI     分钟(00-59)
SS     秒(00-59)
MS     毫秒(000-999)
US     微秒(000000-999999)
AM     正午标识(大写)
Y,YYY  带逗号的年(4和更多位)
YYYY   年(4和更多位)
YYY    年的后三位
YY     年的后两位
Y      年的最后一位
MONTH  全长大写月份名(空白填充为9字符)
Month  全长混合大小写月份名(空白填充为9字符)
month  全长小写月份名(空白填充为9字符)
MON    大写缩写月份名(3字符)
Mon    缩写混合大小写月份名(3字符)
mon    小写缩写月份名(3字符)
MM     月份号(01-12)
DAY    全长大写日期名(空白填充为9字符)
Day    全长混合大小写日期名(空白填充为9字符)
day    全长小写日期名(空白填充为9字符)
DY     缩写大写日期名(3字符)
Dy     缩写混合大小写日期名(3字符)
dy     缩写小写日期名(3字符)
DDD    一年里的日子(001-366)
DD     一个月里的日子(01-31)
D      一周里的日子(1-7；周日是1)
W      一个月里的周数(1-5)(第一周从该月第一天开始)
WW     一年里的周数(1-53)(第一周从该年的第一天开始)
</code></pre>

<h3>五 日期/时间函数</h3>

<p>当前时间： <code>localtime</code>, <code>localtimestamp</code>, <code>now()</code>, <code>current_time</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">localtime</span><span class="p">,</span> <span class="k">localtimestamp</span><span class="p">,</span> <span class="n">now</span><span class="p">(),</span> <span class="k">current_time</span><span class="p">;</span>
</span><span class='line'><span class="c1">--00:06:12.109832 | 2014-01-29 00:06:12.109832 | 2014-01-29 00:06:12.109832+08 | 00:06:12.109832+08</span>
</span></code></pre></td></tr></table></div></figure>


<p>当前日期： <code>current_date</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">current_date</span><span class="p">;</span> <span class="c1">-- 2014-01-28</span>
</span></code></pre></td></tr></table></div></figure>


<p>当前日期和时间： <code>current_timestamp</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">current_timestamp</span><span class="p">;</span> <span class="c1">-- 2014-01-28 23:40:14.761216+08</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取子域： <code>date_part(text, timestamp)</code>, 等同于 <code>extract(field from timestamp)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span>   <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 2014</span>
</span><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;month&#39;</span><span class="p">,</span>  <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 1</span>
</span><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">,</span>    <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 28</span>
</span><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;week&#39;</span><span class="p">,</span>   <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 5</span>
</span><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;hour&#39;</span><span class="p">,</span>   <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 23</span>
</span><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;minute&#39;</span><span class="p">,</span> <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 40</span>
</span><span class='line'><span class="k">select</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="k">timestamp</span><span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span> <span class="c1">-- 14.761216</span>
</span><span class='line'>
</span><span class='line'><span class="k">select</span> <span class="k">extract</span><span class="p">(</span><span class="k">year</span> <span class="k">from</span> <span class="k">timestamp</span> <span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span>  <span class="c1">-- 2014</span>
</span></code></pre></td></tr></table></div></figure>


<p>截断成指定的精度: <code>date_trunc(text, timestamp)</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;hour&#39;</span><span class="p">,</span> <span class="k">timestamp</span> <span class="s1">&#39;2014-01-28 23:40:14.761216+08&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">-- 2014-01-28 23:00:00</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<hr />

<p>1 BETWEEN</p>

<p><code>a BETWEEN x AND y</code> 等效于 <code>a &gt;= x AND a &lt;= y</code></p>

<p><code>a NOT BETWEEN x AND y</code> 等效于 <code>a &lt; x OR a &gt; y</code></p>

<p>2 拼接多条记录的值</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">array_to_string</span><span class="p">(</span> <span class="nb">array</span><span class="p">(</span><span class="k">select</span> <span class="n">nickname</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">),</span> <span class="s1">&#39;;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 string_agg
聚合函数，用于将字段拼接成字符串,相当于对string进行sum
例如：  users表有如下纪录：</p>

<table>
<thead>
<tr>
<th> id  </th>
<th> area_name   </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1  </td>
<td>    北京    </td>
</tr>
<tr>
<td>  1  </td>
<td>    河南    </td>
</tr>
<tr>
<td>  2  </td>
<td>    河南    </td>
</tr>
</tbody>
</table>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">string_agg</span><span class="p">(</span><span class="n">area_name</span><span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">area_names</span>
</span><span class='line'><span class="k">from</span> <span class="n">users</span> <span class="k">group</span> <span class="k">by</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<table>
<thead>
<tr>
<th> id  </th>
<th> area_name   </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1  </td>
<td>  北京;河南    </td>
</tr>
<tr>
<td>  2  </td>
<td>  河南   </td>
</tr>
</tbody>
</table>


<p>再例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">parent_area_code</span><span class="p">,</span>
</span><span class='line'>       <span class="n">string_agg</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s1">&#39;;&#39;</span><span class="p">),</span>
</span><span class='line'>       <span class="n">string_agg</span><span class="p">(</span><span class="n">name</span> <span class="o">||</span> <span class="s1">&#39;_&#39;</span> <span class="o">||</span> <span class="n">area_code</span> <span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">from</span> <span class="n">locations</span> <span class="k">where</span> <span class="n">parent_area_code</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="k">group</span> <span class="k">by</span> <span class="n">parent_area_code</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 array_agg  列转数组</p>

<p>上例也可以用 array_agg + array_to_string 间接实现：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">array_to_string</span><span class="p">(</span><span class="n">array_agg</span><span class="p">(</span><span class="n">area_name</span><span class="p">),</span> <span class="s1">&#39;;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">area_names</span>
</span><span class='line'><span class="k">from</span> <span class="n">users</span> <span class="k">group</span> <span class="k">by</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 字段分割分组]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/postgresql-zi-duan-fen-ge-fen-zu/"/>
    <updated>2014-01-28T20:43:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/postgresql-zi-duan-fen-ge-fen-zu</id>
    <content type="html"><![CDATA[<p>原始： 在import_products中的location_prices字段存储内容：</p>

<pre><code> id  | location_prices  
-----|---------------------
  1  | 北京:200.0;河南:100.0
  2  | 河南;100.0
</code></pre>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">id</span> <span class="p">,</span>
</span><span class='line'>  <span class="n">split_part</span><span class="p">(</span><span class="k">unnest</span><span class="p">(</span><span class="n">string_to_array</span><span class="p">(</span><span class="n">location_prices</span><span class="p">,</span><span class="s1">&#39;;&#39;</span><span class="p">)),</span><span class="s1">&#39;:&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="n">area_name</span><span class="p">,</span>
</span><span class='line'>  <span class="n">split_part</span><span class="p">(</span><span class="k">unnest</span><span class="p">(</span><span class="n">string_to_array</span><span class="p">(</span><span class="n">location_prices</span><span class="p">,</span><span class="s1">&#39;;&#39;</span><span class="p">)),</span><span class="s1">&#39;:&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="n">price</span>
</span><span class='line'><span class="k">from</span> <span class="n">import_products</span>
</span><span class='line'><span class="k">where</span> <span class="n">id</span> <span class="k">in</span> <span class="p">(</span><span class="mi">542796</span><span class="p">,</span><span class="mi">542797</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<pre><code> id  | area_name | price  
-----|-----------|-------
  1  |    北京    | 200.0
  1  |    河南    | 100.0
  2  |    河南    | 100.0
</code></pre>

<p>知识点：</p>

<h3>1. string_to_array</h3>

<p>string_to_array函数的作用是将string类型的字符串分割成数组。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">string_to_array</span><span class="p">(</span><span class="s1">&#39;i|love|you&#39;</span><span class="p">,</span><span class="s1">&#39;|&#39;</span><span class="p">)</span> <span class="p">;</span>  <span class="c1">-- {i,love,you}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. unnest</h3>

<p>unnest 函数的作用是将数组转换成行。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">unnest</span><span class="p">(</span><span class="nb">array</span><span class="p">[</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="s1">&#39;love&#39;</span><span class="p">,</span><span class="s1">&#39;you&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>unnest  
-------
  i
 love
  you
</code></pre>

<h3>3. split_part</h3>

<p>split_part 函数作用是将字符串按照另一个字符串进行分割，并返回分隔以后的</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">split_part</span><span class="p">(</span><span class="s1">&#39;i||love||you&#39;</span><span class="p">,</span> <span class="s1">&#39;||&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span><span class="o">`</span> <span class="c1">-- love</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails中操作Sqlite3数据库速度慢的问题]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/railszhong-cao-zuo-sqlite3shu-ju-ku-su-du-man-de-wen-ti/"/>
    <updated>2014-01-28T12:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/railszhong-cao-zuo-sqlite3shu-ju-ku-su-du-man-de-wen-ti</id>
    <content type="html"><![CDATA[<p>项目中要将数据导出到sqlite数据库中，但是速度太慢了，无法接受：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(0.1ms)  begin transaction
</span><span class='line'>/home/ivan/work/temp/packagetest/app/models/material_type.rb:7: warning: multiple values for a block parameter (0 for 1)
</span><span class='line'>from /home/ivan/.rvm/gems/ruby-1.8.7-p371@rails304/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/database_statements.rb:192
</span><span class='line'>(0.4ms)  insert into material_types(id,name,code,parent_id,created_at,updated_at) values ('40', '40_name','code', 40, 'Fri Nov 29 11:08:54 +0800 2013', 'Fri Nov 29 11:08:54 +0800 2013')
</span><span class='line'>(317.6ms)  commit transaction
</span><span class='line'>
</span><span class='line'>(0.1ms)  begin transaction
</span><span class='line'>/home/ivan/work/temp/packagetest/app/models/material_type.rb:7: warning: multiple values for a block parameter (0 for 1)
</span><span class='line'>from /home/ivan/.rvm/gems/ruby-1.8.7-p371@rails304/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/database_statements.rb:192
</span><span class='line'>(0.4ms)  insert into material_types(id,name,code,parent_id,created_at,updated_at) values ('41', '41_name','code', 41, 'Fri Nov 29 11:08:54 +0800 2013', 'Fri Nov 29 11:08:54 +0800 2013')
</span><span class='line'>(307.8ms)  commit transaction</span></code></pre></td></tr></table></div></figure>


<p>每次最耗时的就是这个 commit transaction 了 居然要300ms左右。</p>

<p>网上查找原因：</p>

<p>SQLite 缺省为每个操作启动一个事务，所以成批插入的时候，每个插入操作都会在一个事务中执行：</p>

<p>这样的花1秒钟才能执行6个插入。如果把所有操作都放在一个事务中，速度能达到1秒几万条，完全不在一个数量级，于是寻求解决方法。</p>

<p>主要思路就是让多个插入操作在一个事务中进行，最后的解决方法是直接使用 SQLite3这个gem，而不通过active_record</p>

<p>方法介绍：</p>

<p>1 连接数据库：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@db_path</span><span class="p">)</span> <span class="c1"># 连接sqlite3数据库</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 配置</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">results_as_hash</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>该项默认为false， 设置成true以后返回的结果集是hash结构的，以字段名称作为key，方便读取数据，否则返回一个数组。</p>

<p>3 执行SQL 语句：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;insert into option (release_time, package_type, id, db_name, db_id) ...&quot;</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span> <span class="n">sql</span>
</span><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;select * from posts where title=? and name=? &quot;</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="s1">&#39;标题&#39;</span><span class="p">,</span><span class="s1">&#39;名称&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 遍历结果集</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="s1">&#39;标题&#39;</span><span class="p">,</span><span class="s1">&#39;名称&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：如果没有找到数据会抛出异常，需要自行处理一下。</p>

<p>5 在单个事务中批量操作</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">transaction</span>
</span><span class='line'><span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;insert into post where name = &#39;name_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#39; &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">commit</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;insert into post where name = &#39;name_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#39; &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的Range类]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/rubyde-rangelei/"/>
    <updated>2014-01-28T12:33:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/rubyde-rangelei</id>
    <content type="html"><![CDATA[<p>Range 是ruby范围对象的类。范围对象是由范围操作符 ..或&#8230; 生成的。</p>

<p>..  生成的范围对象包括终点值。</p>

<p>&#8230; 生成的范围对象不包括终点值。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span>  <span class="c1"># 表示 1、2、3</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span> <span class="c1"># 表示 1、2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Range的实例在内存中只存储了起点和终点，因此比数组更节省空间。</p>

<p>Range 的常用方法：</p>

<p>1.通过 to_a 方法可以将Range对象转换成数组：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>   <span class="o">=&gt;</span>  <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>       <span class="o">=&gt;</span>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.迭代Range</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span> <span class="p">}</span> <span class="c1">#依次输出 1、2、3</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.include?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.end 返回范围终点，与是否包含范围终点无关：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">end</span>    <span class="o">=&gt;</span> <span class="s2">&quot;c&quot;</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">end</span>   <span class="o">=&gt;</span> <span class="s2">&quot;c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.step(s)   以步长s进行迭代：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="nb">p</span> <span class="n">v</span><span class="p">}</span>     <span class="o">=&gt;</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.min 最小值</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">min</span>    <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>7.max 最大值</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">max</span>    <span class="o">=&gt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 小技巧之 $:]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/ruby-xiao-ji-qiao-zhi-%2524/"/>
    <updated>2014-01-28T12:25:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/ruby-xiao-ji-qiao-zhi-%24</id>
    <content type="html"><![CDATA[<p>在一些gem里面经常会有这样一句代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句话是干什么用的呢？</p>

<p><code>$:</code> 就是ruby的一个全局变量，也叫<code>$LOAD_PATH</code>，功能就是java中的classpath，用来加载类库的，当你require某个文件时，ruby就会从这个变量的值去查找，找不到会报LoadError。这个值其实就是一个包含了类库绝对路径的数组。</p>

<p><code>__FILE__</code>这个变量代表文件自己的文件名，在foo.rb中<code>puts __FILE__</code>，结果就是foo.rb。</p>

<p>File.expand_path可以把路径转换成绝对路径，假设有这样一个文件/Users/kenshin/foo.rb，里面有<code>File.expand_path('..', __FILE__)</code>，返回的结果就是/Users/kenshin。</p>

<p>unshift是数组的一个方法，功能就是把指定的值加到数组的最前面，<code>[3,4].unshift(1,2) =&gt; [1,2,3,4]</code></p>

<p>所以这段代码的意思就是把当前文件所在的目录加到ruby的loadpath的最前面，在require文件时，ruby就会先从当前目录下去查找了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 小技巧之 $:]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/ruby-xiao-ji-qiao-zhi-%24/"/>
    <updated>2014-01-28T12:25:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/ruby-xiao-ji-qiao-zhi-$</id>
    <content type="html"><![CDATA[<p>在一些gem里面经常会有这样一句代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句话是干什么用的呢？</p>

<p><code>$:</code> 就是ruby的一个全局变量，也叫<code>$LOAD_PATH</code>，功能就是java中的classpath，用来加载类库的，当你require某个文件时，ruby就会从这个变量的值去查找，找不到会报LoadError。这个值其实就是一个包含了类库绝对路径的数组。</p>

<p><code>__FILE__</code>这个变量代表文件自己的文件名，在foo.rb中<code>puts __FILE__</code>，结果就是foo.rb。</p>

<p>File.expand_path可以把路径转换成绝对路径，假设有这样一个文件/Users/kenshin/foo.rb，里面有<code>File.expand_path('..', __FILE__)</code>，返回的结果就是/Users/kenshin。</p>

<p>unshift是数组的一个方法，功能就是把指定的值加到数组的最前面，<code>[3,4].unshift(1,2) =&gt; [1,2,3,4]</code></p>

<p>所以这段代码的意思就是把当前文件所在的目录加到ruby的loadpath的最前面，在require文件时，ruby就会先从当前目录下去查找了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 的迭代器]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/ruby-de-die-dai-qi/"/>
    <updated>2014-01-27T19:19:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/ruby-de-die-dai-qi</id>
    <content type="html"><![CDATA[<p>ruby中针对集合（数组、哈希）的迭代器有 each map collect inject，下面将逐一介绍</p>

<h3>1 each用法</h3>

<p>  each方法是最简单也最常用的，它会连续访问集合的所有元素然后传值给bloc执行，比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<pre><code> 1
 2
 3
 4
 5
</code></pre>

<h3>2 reverse_each 用法：</h3>

<p> 对比each，从字面上理解reverse_each就是逆序迭代，例如</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">reverse_each</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">v</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<pre><code>3
2
1
</code></pre>

<p>a.reverse_each 和 a.reverse.each 有什么区别呢？  功能是一样的，但是效率不同, reverse_each的效率更高</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">now</span> <span class="o">=</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">;</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">30000000</span><span class="p">)</span> <span class="p">{</span><span class="nb">rand</span><span class="p">}</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">};</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">-</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">15</span><span class="o">.</span><span class="mi">705195</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">now</span> <span class="o">=</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">;</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">30000000</span><span class="p">)</span> <span class="p">{</span><span class="nb">rand</span><span class="p">}</span><span class="o">.</span><span class="n">reverse_each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">};</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">-</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">12</span><span class="o">.</span><span class="mi">956333</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3 map用法</h3>

<p>  map也很常用,它从集合中获得各个元素传递给block，block返回的结果生成新的集合，比如：</p>

<p>  <code>[1,2,3,4,5].map{ |a|  a + 1 }  -&gt;  [2, 3, 4, 5, 6]</code></p>

<p>  再比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:age</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">users</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="s1">&#39;lisi&#39;</span><span class="p">,</span><span class="s1">&#39;wangwu&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>  这个例子可以简写成： <code>users.map(&amp;:name)</code>  ,其运行结果也是一样的</p>

<!-- more -->


<h3>4 collect用法</h3>

<p>  同map一样。</p>

<h3>5 inject用法</h3>

<p>  inject是最有魅力的一个方法，字面意思是‘注入’，可以理解为是一个具有Combines（联合、合并）功能的迭代器，比如：</p>

<p> <code>[1, 2, 3, 4].inject(0) { |result, element| result + element } # =&gt; 10</code></p>

<p>  inject带有一个参数和block,参数是初始值，另外给block中传递了两个值，第一个result是Combines操作的值，第二个参数element是迭代传入集合的每个元素。reslut在inject第一次执行block时把inject带的参数付值给它，该例中inject一共执行4次block，每次执行block完后，最后语句的结果再付值给result，如此循环，直到遍历数组中所有元素。我们深入这个例子看每一步执行的结果。</p>

<p>  因为数组有4个元素，所以要执行4次block操作：</p>

<p>  第一次操作：result=0，既等于inject带的参数；element=1，既第一个元素；</p>

<p>  执行block后result + element =1，再把这个结果付值给result，所以在执行完第一次block后，result = 1。</p>

<p>  第二次操作:result=1，既上次运行block后的最后一条语句的结果；element=2，既第二个元素；执行block后付值result＝3。</p>

<p>  如此类推，直到最后一次执行完block，生产的值为10。就是inject的返回值了。</p>

<p>  inject可以不带参数，此时result的初始值为数组元素的第一个值,element从第二个元素开始传值。所以上例可改写成：</p>

<p>  <code>[2, 3, 4].inject{ |result, element| result*element } # =&gt; 24</code></p>

<p>  注意：这时block执行的次数是3次！而不是4次。</p>

<p>  再例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">element</span><span class="o">.</span><span class="n">to_s</span> <span class="k">if</span> <span class="n">element</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">array</span> <span class="c1"># =&gt; [&quot;2&quot;, &quot;4&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>  注意：这个例子中第三行的result不能省略，否则会报错。</p>

<p>  继续举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get the union:</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">|</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">|</span> <span class="n">x</span> <span class="p">}</span>              <span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:|</span><span class="p">)</span>                          <span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:|</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get the intersection:</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">&amp;</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># =&gt; [3]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">&amp;</span> <span class="n">x</span> <span class="p">}</span>          <span class="c1"># =&gt; [3]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:&amp;</span><span class="p">)</span>                      <span class="c1"># =&gt; [3]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:&amp;</span><span class="p">)</span>                     <span class="c1"># =&gt; [3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># find the longest word</span>
</span><span class='line'><span class="n">longest</span> <span class="o">=</span> <span class="sx">%w{ cat sheep bear }</span><span class="o">.</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="n">memo</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="p">?</span> <span class="n">memo</span> <span class="p">:</span> <span class="n">word</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">longest</span>    <span class="c1"># =&gt; &quot;sheep&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其它： all? 和 any?</h3>

<p>all?[{|obj| block } ] → true or false</p>

<p><code>all?</code>方法遍历集合中的每一个元素并传值给block，</p>

<p>如果block返回结果为包含false或nil，all?方法返回false；</p>

<p>如果block返回结果都为true，all?方法返回true；</p>

<p>如果没有给定block，只要集合中有一个值为false或nil，那么最终结果就是false</p>

<p>例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">}</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">}</span>   <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="o">[</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="mi">99</span> <span class="o">].</span><span class="n">all?</span>                            <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>any?[{|obj| block } ] → true or false</p>

<p>any?方法遍历集合中的每一个元素并传值给block，</p>

<p>如果block返回结果有一个不为false或nil，any?方法返回true；</p>

<p>如果没有给定block，只要集合中有一个值不为false或nil，那么最终结果就是tru</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">}</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">}</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="o">[</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="mi">99</span> <span class="o">].</span><span class="n">any?</span>                            <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactor 模式]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/reactor-mo-shi/"/>
    <updated>2014-01-27T19:11:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/reactor-mo-shi</id>
    <content type="html"><![CDATA[<p>Reactor 设计模式（也叫反应器模式，或者应答者模式）是一种基于事件驱动的设计模式，这种模式像是一个女仆或者服务员，随时等待你的召唤。</p>

<p>高并发的场景经常使用Reactor模式取代常用的多线程处理模式，以节省系统资源，提高系统的吞吐量。</p>

<p>说到这里到底什么是Reactor模式，什么又是多线程模式呢？我们举个栗子：</p>

<p>假设有这么一个场景：你去餐厅吃饭，首先要有服务员将菜单拿给你，你选好以后，服务员帮你完成点餐。</p>

<p>第一种情况：  每有一位乘客光临，就分配一个服务员帮助点餐。</p>

<p>第二种情况：  当乘客来到来以后，服务员会给你菜单，你先点菜。这时服务员去服务其他客人，当你选好以后招呼一下‘服务员’，会有服务员过来帮你点餐。</p>

<p>每个客人好比是一个请求事件，餐厅的服务员好比请求的处理。</p>

<p>第一种情况就是典型的多线程模式，每一个事件到来，都会分配一个线程来处理请求。无疑这样的服务是最好的，每个客人都会觉得自己是vip，于是这家店的口碑越来越好，越来越多的客人来这里用餐，很快老板就发现忙不过来了，多请服务员吧，占地方不说还要多出工钱，成本太大了。</p>

<p>显然第二种情况更好一点，较少的资源服务了较多的客人，这就是Reactor模式，用单线程来干多线程的事，进程和线程的开销是很大的，内存占用高不说，上下文之间的切换也是很慢的。</p>

<p>Reactor模式主要是提高系统的吞吐量，在有限的资源下处理更多的事情。</p>

<p>利用Reactor模式的框架：</p>

<p>Node.js
Gevent、Twisted、Tornado（Python）
EventMachine、Rev（Ruby）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 代理方法 delegate]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/rails-dai-li-fang-fa-delegate/"/>
    <updated>2014-01-27T18:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/rails-dai-li-fang-fa-delegate</id>
    <content type="html"><![CDATA[<p>通过delegate方法，在Foo对象中可以直接引用Greeter对象的方法：</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeter</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">goodbye</span>
</span><span class='line'>    <span class="s2">&quot;goodbye&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:greeter</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>   <span class="c1"># =&gt; &quot;hello&quot;</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">goodbye</span> <span class="c1"># =&gt; NoMethodError: undefined method `goodbye&#39; for #&lt;Foo:0x1af30c&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Multiple delegates to the same target are allowed:</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:greeter</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:goodbye</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>   <span class="c1"># =&gt; &quot;hello&quot;</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">goodbye</span> <span class="c1"># =&gt; &quot;goodbye&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>delegate方法首先检查传入的参数，正确参数形式为:method1, :method2, &#8230;, :methodN, :to => klass[, :prefix => prefix]</p>

<p>delegate要求参数的最后必须是一个Hash，
:to表示需要代理的类，:prefix表示代理的方法是否要加前缀，
如果:prefix => true，则代理的方法名为klass_method1, klass_method2, &#8230;, klass_methodN，</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'> <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:goodbye</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greeter_hello</span>   <span class="c1"># =&gt; &quot;hello&quot;  </span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greeter_goodbye</span> <span class="c1"># =&gt; &quot;goodbye&quot;  </span>
</span></code></pre></td></tr></table></div></figure>


<p>如果:prefix => prefix (prefix为string)，则代理的方法名为prefix_method1, prefix_method2, &#8230;, prefix_methodN。</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:goodbye</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="ss">:foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo_hello</span>   <span class="c1"># =&gt; &quot;hello&quot;  </span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo_goodbye</span> <span class="c1"># =&gt; &quot;goodbye&quot;  </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller 中使用 helper]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/controller-zhong-shi-yong-helper/"/>
    <updated>2014-01-27T18:54:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/controller-zhong-shi-yong-helper</id>
    <content type="html"><![CDATA[<p>helper方法默认只能在view层调用（比如strip_tags方法）。如果想要在controller或model中使用，有两中方法：</p>

<h3>方法一：</h3>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">helpers</span><span class="o">.</span><span class="n">strip_tags</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法二：</h3>

<p>用代理delegate</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="s2">&quot;strip_tags&quot;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;ActionController::Base.helpers&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">strip_tags</span><span class="p">(</span><span class="s2">&quot;html...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 小坑]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/rails-xiao-keng/"/>
    <updated>2014-01-27T12:03:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/rails-xiao-keng</id>
    <content type="html"><![CDATA[<p>我在一个controller中定义了一个action，在这个action的最后：</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redirect_to</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:term_id</span><span class="o">]</span> <span class="p">,</span> <span class="ss">:data_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:data_type</span><span class="o">]</span><span class="p">,</span> <span class="ss">:specialty</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:specialty</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:norm_series</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:norm_series</span><span class="o">]</span><span class="p">,</span> <span class="ss">:range_from</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:range_from</span><span class="o">]</span><span class="p">,</span> <span class="ss">:range_to</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:range_to</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:top_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:top_type</span><span class="o">]</span><span class="p">,</span> <span class="ss">:sub_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:sub_type</span><span class="o">]</span><span class="p">,</span> <span class="ss">:review_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:review_type</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span><span class="p">,</span> <span class="ss">:page_size</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page_size</span><span class="o">]</span> <span class="o">||</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span> <span class="o">||</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>当这个页面执行完以后，没有转到‘show’页面，却进入了一个空白的页面，这个页面只有一句话：</p>

<p>You are being redirected.</p>

<p>点击 &#8216;redirected&#8217; 以后，页面才跳转到&#8217;show&#8217; 页面，百思不得其姐。</p>

<p>最后通过查资料和自己思考终于知道原因了，关键在于后面的堆参数，其中有个 status 变量。哈哈~</p>

<p>说到这里你应该能猜到原因了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 命令行工具]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/rails-ming-ling-xing-gong-ju/"/>
    <updated>2014-01-27T11:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/rails-ming-ling-xing-gong-ju</id>
    <content type="html"><![CDATA[<p>rails 命令行工具</p>

<p>整理一些不常用的但是很有用的命令行工具：</p>

<p>1 rails c &#8211;sandbox</p>

<p>在沙盒模式下启动rails命令行，再此所做的对数据的修改都会会滚。</p>

<p>2 rails runner &#8220;puts User.first.id&#8221;</p>

<p>在rails环境下执行ruby代码，无需启动应用服务。</p>

<p>3 rails dbconsole</p>

<p>启动数据库的命令行，无需数据用户名密码，支持MySQL, PostgreSQL, SQLite and SQLite3.</p>

<p>4 rails destroy</p>

<p>回滚 rails g 对项目的改变。</p>

<p>5 rake -T</p>

<p>查看所有的rake任务。</p>

<p>6 rake about</p>

<p>查看rails应用的环境，包括ruby版本，rails版本等。</p>

<p>7 rake notes</p>

<p>查看项目中的 TODO（待完成）、FIXME（待修复）、OPTIMIZE（待优化）</p>

<p>8 rails g</p>

<p>用于生成脚手架、控制器、模型、数据库迁移任务等。  如果加一个 <code>-p</code> 参数，只输出生成的文件列表，而不是真的创建文件</p>

<p>参考资料：</p>

<p>http://guides.ruby-china.org/command_line.html[http://guides.ruby-china.org/command_line.html]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 读写 Windows 文件]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/ubuntu-du-xie-windows-wen-jian/"/>
    <updated>2014-01-27T11:50:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/ubuntu-du-xie-windows-wen-jian</id>
    <content type="html"><![CDATA[<p>前提：windows系统电脑和ubuntu在同一个局域网内。</p>

<p>在图形模式下：</p>

<ol>
<li><p>打开任意一个文件浏览器</p></li>
<li><p>输入 Ctrl + l</p></li>
<li><p>输入windows电脑地址：smb://192.168.71.34</p></li>
<li><p>在弹出界面输入 windows 电脑的用户名、密码、工作组等信息</p></li>
<li><p>搞定~！</p></li>
</ol>


<p>在命令行模式下：
命令：<code>mount //192.168.10.56/share -o user=DOMIAN\\user,pass=passwd /mnt</code></p>

<p>注意有两点</p>

<p>（1）domain这里是域名，并且要大写</p>

<p>（2）这里有两个\,其中第一个是转义符，第二个是\</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 查看文件夹大小]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/linux-cha-kan-wen-jian-jia-da-xiao/"/>
    <updated>2014-01-27T11:44:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/linux-cha-kan-wen-jian-jia-da-xiao</id>
    <content type="html"><![CDATA[<p>du -sh 查看当前文件夹大小</p>

<p>du -sh * | sort -n 统计当前文件夹(目录)大小，并按文件大小排序</p>

<p>du -sk filename 查看指定文件大小</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux top 命令]]></title>
    <link href="http://duyw.github.io/blog/2014/01/26/linux-top-ming-ling/"/>
    <updated>2014-01-26T23:31:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/26/linux-top-ming-ling</id>
    <content type="html"><![CDATA[<p>top命令经常用来监控linux的系统状况，比如cpu、内存的使用.</p>

<p>执行top命令，系统显示如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>top - 19:40:49 up 11:00,  2 users,  load average: 0.24, 0.42, 0.54
</span><span class='line'>Tasks: 192 total,   1 running, 190 sleeping,   0 stopped,   1 zombie
</span><span class='line'>Cpu(s):  2.5%us,  1.0%sy,  0.0%ni, 96.4%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st
</span><span class='line'>Mem:   3923984k total,  2716120k used,  1207864k free,   705260k buffers
</span><span class='line'>Swap:   262140k total,    69596k used,   192544k free,  1385228k cached
</span><span class='line'>
</span><span class='line'> PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
</span><span class='line'>1168 root      20   0 90320  22m 7676 S    4  0.6  15:17.95 Xorg
</span><span class='line'>1947 ivan      20   0  388m  70m  22m S    4  1.8  16:11.03 compiz         
</span><span class='line'>2116 ivan      20   0  115m  24m  13m S    1  0.6   0:37.49 python         
</span><span class='line'>7346 ivan      20   0  142m  22m  14m S    1  0.6   0:05.42 gnome-terminal 
</span><span class='line'>2031 ivan      20   0  106m  25m  12m S    1  0.7   3:50.68 unity-panel-ser
</span><span class='line'>2113 ivan      20   0 47556 4184 2520 S    1  0.1   0:45.45 ibus-daemon    
</span><span class='line'>7695 ivan      20   0  413m  99m  42m S    1  2.6   0:12.53 chrome         
</span><span class='line'>7713 ivan      20   0  389m  62m  15m S    1  1.6   0:09.25 chrome         
</span><span class='line'>1822 root      20   0 88528 1712 1484 S    0  0.0   2:19.14 mongod         
</span><span class='line'>1919 ivan      20   0  6968 3108  620 S    0  0.1   1:23.65 dbus-daemon    
</span><span class='line'>1932 ivan      20   0  238m  13m 9884 S    0  0.3   0:25.07 gnome-settings-
</span><span class='line'>2033 ivan      20   0 71728 8896 3336 S    0  0.2   0:30.65 hud-service    
</span><span class='line'>2104 ivan      20   0 42080 5500 4460 S    0  0.1   0:01.97 ubuntu-geoip-pr
</span><span class='line'>   1 root      20   0  3664 1796 1204 S    0  0.0   0:00.69 init           
</span><span class='line'>   2 root      20   0     0    0    0 S    0  0.0   0:00.00 kthreadd       
</span><span class='line'>   3 root      20   0     0    0    0 S    0  0.0   0:03.90 ksoftirqd/0    
</span><span class='line'>   6 root      RT   0     0    0    0 S    0  0.0   0:00.21 migration/0    
</span><span class='line'>   7 root      RT   0     0    0    0 S    0  0.0   0:00.15 watchdog/0     
</span><span class='line'>  20 root       0 -20     0    0    0 S    0  0.0   0:00.00 cpuset         
</span><span class='line'>  21 root       0 -20     0    0    0 S    0  0.0   0:00.00 khelper        
</span><span class='line'>  22 root      20   0     0    0    0 S    0  0.0   0:00.00 kdevtmpfs      
</span><span class='line'>  23 root       0 -20     0    0    0 S    0  0.0   0:00.00 netns          
</span><span class='line'>  25 root      20   0     0    0    0 S    0  0.0   0:00.13 sync_supers    
</span><span class='line'>  26 root      20   0     0    0    0 S    0  0.0   0:00.00 bdi-default    
</span><span class='line'>  27 root       0 -20     0    0    0 S    0  0.0   0:00.00 kintegrityd    </span></code></pre></td></tr></table></div></figure>


<h3>第一行：</h3>

<p>19:40:49表明当前系统时间； up 11:00 表明系统持续运行11个小时；2 users：目前两个登录用户；
load average: 0.24, 0.42, 0.5 ：表明最近的 1、5、15 分钟系统的负载情况</p>

<h3>第二行：进程状态</h3>

<p>Tasks: 192 total,   1 running, 190 sleeping,   0 stopped,   1 zombie :目前进程总数192,其中1个在运行中，190个休眠中，1个僵死；</p>

<h3>第三行： CPU使用情况</h3>

<p>2.5%us： 当前用户CPU占用百分比
1.0%sy： 系统内核CPU占用百分比
0.0%ni： 优先继承的CPU占用百分比
96.4%id：空闲CPU占用百分比
0.0%wa： IO等待进程CPU占用百分比
0.0%hi： 硬中断CPU占用百分比
0.1%si： 软中断CPU占用百分比
0.0%st</p>

<h3>第四行：内存使用情况</h3>

<p>3923984k total： 物理内存总量（4G）
2716120k used：  已经使用2.7G
1207864k free:   空闲物理内存（1.2G）
705260k buffers：缓存内存量（700兆）</p>

<h3>第五行：swap交换分区</h3>

<p>262140k total：  总共260兆
69596k used：    已经使用70兆
192544k free：   剩余190兆
1385228k cached：缓冲的交换区1.3G</p>

<h3>第六行： 空行</h3>

<p>PID 进程id
USER 进程所有者
PR 进程优先级
NI nice值。负值表示高优先级，正值表示低优先级
VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
SHR 共享内存大小，单位kb
S 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
%CPU
%MEM
TIME+<br/>
COMMAND</p>
]]></content>
  </entry>
  
</feed>

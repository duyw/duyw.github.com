<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[杜永文 博客]]></title>
  <link href="http://duyw.github.io/atom.xml" rel="self"/>
  <link href="http://duyw.github.io/"/>
  <updated>2014-01-28T13:09:24+08:00</updated>
  <id>http://duyw.github.io/</id>
  <author>
    <name><![CDATA[Du Yongwen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails中操作Sqlite3数据库速度慢的问题]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/railszhong-cao-zuo-sqlite3shu-ju-ku-su-du-man-de-wen-ti/"/>
    <updated>2014-01-28T12:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/railszhong-cao-zuo-sqlite3shu-ju-ku-su-du-man-de-wen-ti</id>
    <content type="html"><![CDATA[<p>项目中要将数据导出到sqlite数据库中，但是速度太慢了，无法接受：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(0.1ms)  begin transaction
</span><span class='line'>/home/ivan/work/temp/packagetest/app/models/material_type.rb:7: warning: multiple values for a block parameter (0 for 1)
</span><span class='line'>from /home/ivan/.rvm/gems/ruby-1.8.7-p371@rails304/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/database_statements.rb:192
</span><span class='line'>(0.4ms)  insert into material_types(id,name,code,parent_id,created_at,updated_at) values ('40', '40_name','code', 40, 'Fri Nov 29 11:08:54 +0800 2013', 'Fri Nov 29 11:08:54 +0800 2013')
</span><span class='line'>(317.6ms)  commit transaction
</span><span class='line'>
</span><span class='line'>(0.1ms)  begin transaction
</span><span class='line'>/home/ivan/work/temp/packagetest/app/models/material_type.rb:7: warning: multiple values for a block parameter (0 for 1)
</span><span class='line'>from /home/ivan/.rvm/gems/ruby-1.8.7-p371@rails304/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/database_statements.rb:192
</span><span class='line'>(0.4ms)  insert into material_types(id,name,code,parent_id,created_at,updated_at) values ('41', '41_name','code', 41, 'Fri Nov 29 11:08:54 +0800 2013', 'Fri Nov 29 11:08:54 +0800 2013')
</span><span class='line'>(307.8ms)  commit transaction</span></code></pre></td></tr></table></div></figure>


<p>每次最耗时的就是这个 commit transaction 了 居然要300ms左右。</p>

<p>网上查找原因：</p>

<p>SQLite 缺省为每个操作启动一个事务，所以成批插入的时候，每个插入操作都会在一个事务中执行：</p>

<p>这样的花1秒钟才能执行6个插入。如果把所有操作都放在一个事务中，速度能达到1秒几万条，完全不在一个数量级，于是寻求解决方法。</p>

<p>主要思路就是让多个插入操作在一个事务中进行，最后的解决方法是直接使用 SQLite3这个gem，而不通过active_record</p>

<p>方法介绍：</p>

<p>1 连接数据库：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@db_path</span><span class="p">)</span> <span class="c1"># 连接sqlite3数据库</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 配置</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">results_as_hash</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>该项默认为false， 设置成true以后返回的结果集是hash结构的，以字段名称作为key，方便读取数据，否则返回一个数组。</p>

<p>3 执行SQL 语句：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;insert into option (release_time, package_type, id, db_name, db_id) ...&quot;</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span> <span class="n">sql</span>
</span><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;select * from posts where title=? and name=? &quot;</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="s1">&#39;标题&#39;</span><span class="p">,</span><span class="s1">&#39;名称&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 遍历结果集</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="s1">&#39;标题&#39;</span><span class="p">,</span><span class="s1">&#39;名称&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：如果没有找到数据会抛出异常，需要自行处理一下。</p>

<p>5 在单个事务中批量操作</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">transaction</span>
</span><span class='line'><span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;insert into post where name = &#39;name_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#39; &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">commit</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@db</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;insert into post where name = &#39;name_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#39; &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的Range类]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/rubyde-rangelei/"/>
    <updated>2014-01-28T12:33:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/rubyde-rangelei</id>
    <content type="html"><![CDATA[<p>Range 是ruby范围对象的类。范围对象是由范围操作符 ..或&#8230; 生成的。</p>

<p>..  生成的范围对象包括终点值。</p>

<p>&#8230; 生成的范围对象不包括终点值。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span>  <span class="c1"># 表示 1、2、3</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span> <span class="c1"># 表示 1、2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Range的实例在内存中只存储了起点和终点，因此比数组更节省空间。</p>

<p>Range 的常用方法：</p>

<p>1.通过 to_a 方法可以将Range对象转换成数组：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>   <span class="o">=&gt;</span>  <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>       <span class="o">=&gt;</span>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.迭代Range</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span> <span class="p">}</span> <span class="c1">#依次输出 1、2、3</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.include?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.end 返回范围终点，与是否包含范围终点无关：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">end</span>    <span class="o">=&gt;</span> <span class="s2">&quot;c&quot;</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">end</span>   <span class="o">=&gt;</span> <span class="s2">&quot;c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.step(s)   以步长s进行迭代：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="nb">p</span> <span class="n">v</span><span class="p">}</span>     <span class="o">=&gt;</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.min 最小值</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">min</span>    <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>7.max 最大值</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">max</span>    <span class="o">=&gt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 小技巧之 $:]]></title>
    <link href="http://duyw.github.io/blog/2014/01/28/ruby-xiao-ji-qiao-zhi-%24/"/>
    <updated>2014-01-28T12:25:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/28/ruby-xiao-ji-qiao-zhi-$</id>
    <content type="html"><![CDATA[<p>在一些gem里面经常会有这样一句代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句话是干什么用的呢？</p>

<p><code>$:</code> 就是ruby的一个全局变量，也叫<code>$LOAD_PATH</code>，功能就是java中的classpath，用来加载类库的，当你require某个文件时，ruby就会从这个变量的值去查找，找不到会报LoadError。这个值其实就是一个包含了类库绝对路径的数组。</p>

<p><code>__FILE__</code>这个变量代表文件自己的文件名，在foo.rb中<code>puts __FILE__</code>，结果就是foo.rb。</p>

<p>File.expand_path可以把路径转换成绝对路径，假设有这样一个文件/Users/kenshin/foo.rb，里面有<code>File.expand_path('..', __FILE__)</code>，返回的结果就是/Users/kenshin。</p>

<p>unshift是数组的一个方法，功能就是把指定的值加到数组的最前面，<code>[3,4].unshift(1,2) =&gt; [1,2,3,4]</code></p>

<p>所以这段代码的意思就是把当前文件所在的目录加到ruby的loadpath的最前面，在require文件时，ruby就会先从当前目录下去查找了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 的迭代器]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/ruby-de-die-dai-qi/"/>
    <updated>2014-01-27T19:19:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/ruby-de-die-dai-qi</id>
    <content type="html"><![CDATA[<p>ruby中针对集合（数组、哈希）的迭代器有 each map collect inject，下面将逐一介绍</p>

<h3>1 each用法</h3>

<p>  each方法是最简单也最常用的，它会连续访问集合的所有元素然后传值给bloc执行，比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<pre><code> 1
 2
 3
 4
 5
</code></pre>

<h3>2 reverse_each 用法：</h3>

<p> 对比each，从字面上理解reverse_each就是逆序迭代，例如</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">reverse_each</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">v</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<pre><code>3
2
1
</code></pre>

<p>a.reverse_each 和 a.reverse.each 有什么区别呢？  功能是一样的，但是效率不同, reverse_each的效率更高</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">now</span> <span class="o">=</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">;</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">30000000</span><span class="p">)</span> <span class="p">{</span><span class="nb">rand</span><span class="p">}</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">};</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">-</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">15</span><span class="o">.</span><span class="mi">705195</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">now</span> <span class="o">=</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">;</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">30000000</span><span class="p">)</span> <span class="p">{</span><span class="nb">rand</span><span class="p">}</span><span class="o">.</span><span class="n">reverse_each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">};</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">-</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">12</span><span class="o">.</span><span class="mi">956333</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3 map用法</h3>

<p>  map也很常用,它从集合中获得各个元素传递给block，block返回的结果生成新的集合，比如：</p>

<p>  <code>[1,2,3,4,5].map{ |a|  a + 1 }  -&gt;  [2, 3, 4, 5, 6]</code></p>

<p>  再比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:age</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">users</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="s1">&#39;lisi&#39;</span><span class="p">,</span><span class="s1">&#39;wangwu&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>  这个例子可以简写成： <code>users.map(&amp;:name)</code>  ,其运行结果也是一样的</p>

<h3>4 collect用法</h3>

<p>  同map一样。</p>

<h3>5 inject用法</h3>

<p>  inject是最有魅力的一个方法，字面意思是‘注入’，可以理解为是一个具有Combines（联合、合并）功能的迭代器，比如：</p>

<p> <code>[1, 2, 3, 4].inject(0) { |result, element| result + element } # =&gt; 10</code></p>

<p>  inject带有一个参数和block,参数是初始值，另外给block中传递了两个值，第一个result是Combines操作的值，第二个参数element是迭代传入集合的每个元素。reslut在inject第一次执行block时把inject带的参数付值给它，该例中inject一共执行4次block，每次执行block完后，最后语句的结果再付值给result，如此循环，直到遍历数组中所有元素。我们深入这个例子看每一步执行的结果。</p>

<p>  因为数组有4个元素，所以要执行4次block操作：</p>

<p>  第一次操作：result=0，既等于inject带的参数；element=1，既第一个元素；</p>

<p>  执行block后result + element =1，再把这个结果付值给result，所以在执行完第一次block后，result = 1。</p>

<p>  第二次操作:result=1，既上次运行block后的最后一条语句的结果；element=2，既第二个元素；执行block后付值result＝3。</p>

<p>  如此类推，直到最后一次执行完block，生产的值为10。就是inject的返回值了。</p>

<p>  inject可以不带参数，此时result的初始值为数组元素的第一个值,element从第二个元素开始传值。所以上例可改写成：</p>

<p>  <code>[2, 3, 4].inject{ |result, element| result*element } # =&gt; 24</code></p>

<p>  注意：这时block执行的次数是3次！而不是4次。</p>

<p>  再例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">element</span><span class="o">.</span><span class="n">to_s</span> <span class="k">if</span> <span class="n">element</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">array</span> <span class="c1"># =&gt; [&quot;2&quot;, &quot;4&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>  注意：这个例子中第三行的result不能省略，否则会报错。</p>

<p>  继续举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get the union:</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">|</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">|</span> <span class="n">x</span> <span class="p">}</span>              <span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:|</span><span class="p">)</span>                          <span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:|</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get the intersection:</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">&amp;</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># =&gt; [3]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">f</span> <span class="o">&amp;</span> <span class="n">x</span> <span class="p">}</span>          <span class="c1"># =&gt; [3]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:&amp;</span><span class="p">)</span>                      <span class="c1"># =&gt; [3]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:&amp;</span><span class="p">)</span>                     <span class="c1"># =&gt; [3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># find the longest word</span>
</span><span class='line'><span class="n">longest</span> <span class="o">=</span> <span class="sx">%w{ cat sheep bear }</span><span class="o">.</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="n">memo</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="p">?</span> <span class="n">memo</span> <span class="p">:</span> <span class="n">word</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">longest</span>    <span class="c1"># =&gt; &quot;sheep&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其它： all? 和 any?</h3>

<p>all?[{|obj| block } ] → true or false</p>

<p><code>all?</code>方法遍历集合中的每一个元素并传值给block，</p>

<p>如果block返回结果为包含false或nil，all?方法返回false；</p>

<p>如果block返回结果都为true，all?方法返回true；</p>

<p>如果没有给定block，只要集合中有一个值为false或nil，那么最终结果就是false</p>

<p>例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">}</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">}</span>   <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="o">[</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="mi">99</span> <span class="o">].</span><span class="n">all?</span>                            <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>any?[{|obj| block } ] → true or false</p>

<p>any?方法遍历集合中的每一个元素并传值给block，</p>

<p>如果block返回结果有一个不为false或nil，any?方法返回true；</p>

<p>如果没有给定block，只要集合中有一个值不为false或nil，那么最终结果就是tru</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">}</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">}</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="o">[</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="mi">99</span> <span class="o">].</span><span class="n">any?</span>                            <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactor 模式]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/reactor-mo-shi/"/>
    <updated>2014-01-27T19:11:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/reactor-mo-shi</id>
    <content type="html"><![CDATA[<p>Reactor 设计模式（也叫反应器模式，或者应答者模式）是一种基于事件驱动的设计模式，这种模式像是一个女仆或者服务员，随时等待你的召唤。</p>

<p>高并发的场景经常使用Reactor模式取代常用的多线程处理模式，以节省系统资源，提高系统的吞吐量。</p>

<p>说到这里到底什么是Reactor模式，什么又是多线程模式呢？我们举个栗子：</p>

<p>假设有这么一个场景：你去餐厅吃饭，首先要有服务员将菜单拿给你，你选好以后，服务员帮你完成点餐。</p>

<p>第一种情况：  每有一位乘客光临，就分配一个服务员帮助点餐。</p>

<p>第二种情况：  当乘客来到来以后，服务员会给你菜单，你先点菜。这时服务员去服务其他客人，当你选好以后招呼一下‘服务员’，会有服务员过来帮你点餐。</p>

<p>每个客人好比是一个请求事件，餐厅的服务员好比请求的处理。</p>

<p>第一种情况就是典型的多线程模式，每一个事件到来，都会分配一个线程来处理请求。无疑这样的服务是最好的，每个客人都会觉得自己是vip，于是这家店的口碑越来越好，越来越多的客人来这里用餐，很快老板就发现忙不过来了，多请服务员吧，占地方不说还要多出工钱，成本太大了。</p>

<p>显然第二种情况更好一点，较少的资源服务了较多的客人，这就是Reactor模式，用单线程来干多线程的事，进程和线程的开销是很大的，内存占用高不说，上下文之间的切换也是很慢的。</p>

<p>Reactor模式主要是提高系统的吞吐量，在有限的资源下处理更多的事情。</p>

<p>利用Reactor模式的框架：</p>

<p>Node.js
Gevent、Twisted、Tornado（Python）
EventMachine、Rev（Ruby）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 代理方法 delegate]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/rails-dai-li-fang-fa-delegate/"/>
    <updated>2014-01-27T18:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/rails-dai-li-fang-fa-delegate</id>
    <content type="html"><![CDATA[<p>通过delegate方法，在Foo对象中可以直接引用Greeter对象的方法：</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeter</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">goodbye</span>
</span><span class='line'>    <span class="s2">&quot;goodbye&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:greeter</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>   <span class="c1"># =&gt; &quot;hello&quot;</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">goodbye</span> <span class="c1"># =&gt; NoMethodError: undefined method `goodbye&#39; for #&lt;Foo:0x1af30c&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Multiple delegates to the same target are allowed:</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:greeter</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:goodbye</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>   <span class="c1"># =&gt; &quot;hello&quot;</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">goodbye</span> <span class="c1"># =&gt; &quot;goodbye&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>delegate方法首先检查传入的参数，正确参数形式为:method1, :method2, &#8230;, :methodN, :to => klass[, :prefix => prefix]</p>

<p>delegate要求参数的最后必须是一个Hash，
:to表示需要代理的类，:prefix表示代理的方法是否要加前缀，
如果:prefix => true，则代理的方法名为klass_method1, klass_method2, &#8230;, klass_methodN，</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'> <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:goodbye</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greeter_hello</span>   <span class="c1"># =&gt; &quot;hello&quot;  </span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greeter_goodbye</span> <span class="c1"># =&gt; &quot;goodbye&quot;  </span>
</span></code></pre></td></tr></table></div></figure>


<p>如果:prefix => prefix (prefix为string)，则代理的方法名为prefix_method1, prefix_method2, &#8230;, prefix_methodN。</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:goodbye</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:greeter</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="ss">:foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo_hello</span>   <span class="c1"># =&gt; &quot;hello&quot;  </span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo_goodbye</span> <span class="c1"># =&gt; &quot;goodbye&quot;  </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller 中使用 helper]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/controller-zhong-shi-yong-helper/"/>
    <updated>2014-01-27T18:54:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/controller-zhong-shi-yong-helper</id>
    <content type="html"><![CDATA[<p>helper方法默认只能在view层调用（比如strip_tags方法）。如果想要在controller或model中使用，有两中方法：</p>

<h3>方法一：</h3>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">helpers</span><span class="o">.</span><span class="n">strip_tags</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法二：</h3>

<p>用代理delegate</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="s2">&quot;strip_tags&quot;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;ActionController::Base.helpers&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">strip_tags</span><span class="p">(</span><span class="s2">&quot;html...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 小坑]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/rails-xiao-keng/"/>
    <updated>2014-01-27T12:03:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/rails-xiao-keng</id>
    <content type="html"><![CDATA[<p>我在一个controller中定义了一个action，在这个action的最后：</p>

<figure class='code'><figcaption><span>Ruby代码: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redirect_to</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:term_id</span><span class="o">]</span> <span class="p">,</span> <span class="ss">:data_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:data_type</span><span class="o">]</span><span class="p">,</span> <span class="ss">:specialty</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:specialty</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:norm_series</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:norm_series</span><span class="o">]</span><span class="p">,</span> <span class="ss">:range_from</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:range_from</span><span class="o">]</span><span class="p">,</span> <span class="ss">:range_to</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:range_to</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:top_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:top_type</span><span class="o">]</span><span class="p">,</span> <span class="ss">:sub_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:sub_type</span><span class="o">]</span><span class="p">,</span> <span class="ss">:review_type</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:review_type</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span><span class="p">,</span> <span class="ss">:page_size</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page_size</span><span class="o">]</span> <span class="o">||</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span> <span class="o">||</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>当这个页面执行完以后，没有转到‘show’页面，却进入了一个空白的页面，这个页面只有一句话：</p>

<p>You are being redirected.</p>

<p>点击 &#8216;redirected&#8217; 以后，页面才跳转到&#8217;show&#8217; 页面，百思不得其姐。</p>

<p>最后通过查资料和自己思考终于知道原因了，关键在于后面的堆参数，其中有个 status 变量。哈哈~</p>

<p>说到这里你应该能猜到原因了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 命令行工具]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/rails-ming-ling-xing-gong-ju/"/>
    <updated>2014-01-27T11:58:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/rails-ming-ling-xing-gong-ju</id>
    <content type="html"><![CDATA[<p>rails 命令行工具</p>

<p>整理一些不常用的但是很有用的命令行工具：</p>

<p>1 rails c &#8211;sandbox</p>

<p>在沙盒模式下启动rails命令行，再此所做的对数据的修改都会会滚。</p>

<p>2 rails runner &#8220;puts User.first.id&#8221;</p>

<p>在rails环境下执行ruby代码，无需启动应用服务。</p>

<p>3 rails dbconsole</p>

<p>启动数据库的命令行，无需数据用户名密码，支持MySQL, PostgreSQL, SQLite and SQLite3.</p>

<p>4 rails destroy</p>

<p>回滚 rails g 对项目的改变。</p>

<p>5 rake -T</p>

<p>查看所有的rake任务。</p>

<p>6 rake about</p>

<p>查看rails应用的环境，包括ruby版本，rails版本等。</p>

<p>7 rake notes</p>

<p>查看项目中的 TODO（待完成）、FIXME（待修复）、OPTIMIZE（待优化）</p>

<p>8 rails g</p>

<p>用于生成脚手架、控制器、模型、数据库迁移任务等。  如果加一个 <code>-p</code> 参数，只输出生成的文件列表，而不是真的创建文件</p>

<p>参考资料：</p>

<p>http://guides.ruby-china.org/command_line.html[http://guides.ruby-china.org/command_line.html]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 读写 Windows 文件]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/ubuntu-du-xie-windows-wen-jian/"/>
    <updated>2014-01-27T11:50:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/ubuntu-du-xie-windows-wen-jian</id>
    <content type="html"><![CDATA[<p>前提：windows系统电脑和ubuntu在同一个局域网内。</p>

<p>在图形模式下：</p>

<ol>
<li><p>打开任意一个文件浏览器</p></li>
<li><p>输入 Ctrl + l</p></li>
<li><p>输入windows电脑地址：smb://192.168.71.34</p></li>
<li><p>在弹出界面输入 windows 电脑的用户名、密码、工作组等信息</p></li>
<li><p>搞定~！</p></li>
</ol>


<p>在命令行模式下：
命令：<code>mount //192.168.10.56/share -o user=DOMIAN\\user,pass=passwd /mnt</code></p>

<p>注意有两点</p>

<p>（1）domain这里是域名，并且要大写</p>

<p>（2）这里有两个\,其中第一个是转义符，第二个是\</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 查看文件夹大小]]></title>
    <link href="http://duyw.github.io/blog/2014/01/27/linux-cha-kan-wen-jian-jia-da-xiao/"/>
    <updated>2014-01-27T11:44:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/27/linux-cha-kan-wen-jian-jia-da-xiao</id>
    <content type="html"><![CDATA[<p>du -sh 查看当前文件夹大小</p>

<p>du -sh * | sort -n 统计当前文件夹(目录)大小，并按文件大小排序</p>

<p>du -sk filename 查看指定文件大小</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux top 命令]]></title>
    <link href="http://duyw.github.io/blog/2014/01/26/linux-top-ming-ling/"/>
    <updated>2014-01-26T23:31:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/26/linux-top-ming-ling</id>
    <content type="html"><![CDATA[<p>top命令经常用来监控linux的系统状况，比如cpu、内存的使用.</p>

<p>执行top命令，系统显示如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>top - 19:40:49 up 11:00,  2 users,  load average: 0.24, 0.42, 0.54
</span><span class='line'>Tasks: 192 total,   1 running, 190 sleeping,   0 stopped,   1 zombie
</span><span class='line'>Cpu(s):  2.5%us,  1.0%sy,  0.0%ni, 96.4%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st
</span><span class='line'>Mem:   3923984k total,  2716120k used,  1207864k free,   705260k buffers
</span><span class='line'>Swap:   262140k total,    69596k used,   192544k free,  1385228k cached
</span><span class='line'>
</span><span class='line'> PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
</span><span class='line'>1168 root      20   0 90320  22m 7676 S    4  0.6  15:17.95 Xorg
</span><span class='line'>1947 ivan      20   0  388m  70m  22m S    4  1.8  16:11.03 compiz         
</span><span class='line'>2116 ivan      20   0  115m  24m  13m S    1  0.6   0:37.49 python         
</span><span class='line'>7346 ivan      20   0  142m  22m  14m S    1  0.6   0:05.42 gnome-terminal 
</span><span class='line'>2031 ivan      20   0  106m  25m  12m S    1  0.7   3:50.68 unity-panel-ser
</span><span class='line'>2113 ivan      20   0 47556 4184 2520 S    1  0.1   0:45.45 ibus-daemon    
</span><span class='line'>7695 ivan      20   0  413m  99m  42m S    1  2.6   0:12.53 chrome         
</span><span class='line'>7713 ivan      20   0  389m  62m  15m S    1  1.6   0:09.25 chrome         
</span><span class='line'>1822 root      20   0 88528 1712 1484 S    0  0.0   2:19.14 mongod         
</span><span class='line'>1919 ivan      20   0  6968 3108  620 S    0  0.1   1:23.65 dbus-daemon    
</span><span class='line'>1932 ivan      20   0  238m  13m 9884 S    0  0.3   0:25.07 gnome-settings-
</span><span class='line'>2033 ivan      20   0 71728 8896 3336 S    0  0.2   0:30.65 hud-service    
</span><span class='line'>2104 ivan      20   0 42080 5500 4460 S    0  0.1   0:01.97 ubuntu-geoip-pr
</span><span class='line'>   1 root      20   0  3664 1796 1204 S    0  0.0   0:00.69 init           
</span><span class='line'>   2 root      20   0     0    0    0 S    0  0.0   0:00.00 kthreadd       
</span><span class='line'>   3 root      20   0     0    0    0 S    0  0.0   0:03.90 ksoftirqd/0    
</span><span class='line'>   6 root      RT   0     0    0    0 S    0  0.0   0:00.21 migration/0    
</span><span class='line'>   7 root      RT   0     0    0    0 S    0  0.0   0:00.15 watchdog/0     
</span><span class='line'>  20 root       0 -20     0    0    0 S    0  0.0   0:00.00 cpuset         
</span><span class='line'>  21 root       0 -20     0    0    0 S    0  0.0   0:00.00 khelper        
</span><span class='line'>  22 root      20   0     0    0    0 S    0  0.0   0:00.00 kdevtmpfs      
</span><span class='line'>  23 root       0 -20     0    0    0 S    0  0.0   0:00.00 netns          
</span><span class='line'>  25 root      20   0     0    0    0 S    0  0.0   0:00.13 sync_supers    
</span><span class='line'>  26 root      20   0     0    0    0 S    0  0.0   0:00.00 bdi-default    
</span><span class='line'>  27 root       0 -20     0    0    0 S    0  0.0   0:00.00 kintegrityd    </span></code></pre></td></tr></table></div></figure>


<h3>第一行：</h3>

<p>19:40:49表明当前系统时间； up 11:00 表明系统持续运行11个小时；2 users：目前两个登录用户；
load average: 0.24, 0.42, 0.5 ：表明最近的 1、5、15 分钟系统的负载情况</p>

<h3>第二行：进程状态</h3>

<p>Tasks: 192 total,   1 running, 190 sleeping,   0 stopped,   1 zombie :目前进程总数192,其中1个在运行中，190个休眠中，1个僵死；</p>

<h3>第三行： CPU使用情况</h3>

<p>2.5%us： 当前用户CPU占用百分比
1.0%sy： 系统内核CPU占用百分比
0.0%ni： 优先继承的CPU占用百分比
96.4%id：空闲CPU占用百分比
0.0%wa： IO等待进程CPU占用百分比
0.0%hi： 硬中断CPU占用百分比
0.1%si： 软中断CPU占用百分比
0.0%st</p>

<h3>第四行：内存使用情况</h3>

<p>3923984k total： 物理内存总量（4G）
2716120k used：  已经使用2.7G
1207864k free:   空闲物理内存（1.2G）
705260k buffers：缓存内存量（700兆）</p>

<h3>第五行：swap交换分区</h3>

<p>262140k total：  总共260兆
69596k used：    已经使用70兆
192544k free：   剩余190兆
1385228k cached：缓冲的交换区1.3G</p>

<h3>第六行： 空行</h3>

<p>PID 进程id
USER 进程所有者
PR 进程优先级
NI nice值。负值表示高优先级，正值表示低优先级
VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
SHR 共享内存大小，单位kb
S 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
%CPU
%MEM
TIME+<br/>
COMMAND</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客很久没有更新了]]></title>
    <link href="http://duyw.github.io/blog/2014/01/26/bo-ke-hen-jiu-mei-you-geng-xin-liao/"/>
    <updated>2014-01-26T22:50:00+08:00</updated>
    <id>http://duyw.github.io/blog/2014/01/26/bo-ke-hen-jiu-mei-you-geng-xin-liao</id>
    <content type="html"><![CDATA[<p>的确很久没有更新了，回顾2013年，从来没有感觉时间过的如此之快。</p>

<p>我只记得来广联达面试的时候我穿的是羽绒服，再次穿上羽绒服的时候猛然发现一个夏天已经过去了。再后来，不知不觉又到了过年回家抢火车票的时候。</p>

<p>一整年几乎都是在加班与忙碌中度过，难得在家的时候也不得清闲，要帮忙照顾小宝。这一年虽然累，但也算累的充实，工作不忙的时候我也经常会去公司学习，积攒了不少东西，平时为了图方便都记录在为知笔记中，刚好假期中有时间，打算整理到博客中，一是为了回顾学习，二是为了以后方便查询，三是希望能帮助到别人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install gem without ri and rdoc]]></title>
    <link href="http://duyw.github.io/blog/2013/05/03/install-gem-without-ri-and-rdoc/"/>
    <updated>2013-05-03T09:23:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/05/03/install-gem-without-ri-and-rdoc</id>
    <content type="html"><![CDATA[<p>用 <code>gem install XXX</code> 安装 Gem 包的同时会安装 ri 和 rdoc，但这两个东西一般用不到，另外还严重影响安装速度，介于这两个原因我们一般都会这么做：</p>

<p><code>gem install rails --no-ri --no-rdoc</code></p>

<p>但是每个 Gem 包安装都这么做就太麻烦了，我们可以直接修改配置让 Gem 默认不安装 ri 和 rdoc：</p>

<p>打开 ~/.gemrc   （如果没有这个文件可以自己手动创建）</p>

<p>在文件最后加入 <code>gem: --no-ri --no-rdoc</code> ：</p>

<pre><code>---
:backtrace: false
:benchmark: false
:bulk_threshold: 1000
:sources:
- http://ruby.taobao.org
:update_sources: true
:verbose: true
gem: --no-ri --no-rdoc
</code></pre>

<p>大功告成~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engine]]></title>
    <link href="http://duyw.github.io/blog/2013/05/02/rails-engine/"/>
    <updated>2013-05-02T15:55:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/05/02/rails-engine</id>
    <content type="html"><![CDATA[<h3>1. Engine是什么？</h3>

<p>Engine 可以被看作是（一个）微型的rails应用程序。其提供（一些额外的）功能给它们的宿主程序（host applications）。</p>

<p>一个 Rails 应用程序实际上就是一个 “加强版”（supercharged） engine，因为 Rails::Application 继承了来自 Rails::Engine 的更多习惯。</p>

<p>Engine 也可以与他们的宿主程序相互隔离。controllers， models 和 table也是名称空间化的。</p>

<p>可以简单的理解为 Engine 是对宿主程序的一个拓展、加强。典型的Engine案例有<a href="https://github.com/plataformatec/devise">Devise</a>、<a href="https://github.com/radar/forem">Forem</a>、<a href="https://github.com/resolve/refinerycms">Refinerycms</a>等。</p>

<h3>2. 创建一个Engine</h3>

<p>本文以创建一个基于 rails3.2 的 Engine 为例，命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails plugin new my_engine --full --mountable</span></code></pre></td></tr></table></div></figure>


<p><code>--full</code>:  创建一个完整的，等同rails项目的目录结构。</p>

<p><code>--mountable</code>: 选项告诉创建器去挂载 engine 到在 engine 中的 test/dummy 的模拟（dummy）测试程序。在dummy的 config/routes.rb 加入内容：<code>mount MyEngine::Engine =&gt; "/my_engine"</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Quick Tips]]></title>
    <link href="http://duyw.github.io/blog/2013/05/02/mongodb-quick-tips/"/>
    <updated>2013-05-02T11:04:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/05/02/mongodb-quick-tips</id>
    <content type="html"><![CDATA[<h3>1. 介绍</h3>

<p>　　一个mongod服务可以有建立多个数据库，每个数据库可以有多张表，这里的表名叫collection，每个collection可以存放多个文档（document），每个文档都以BSON（binary json）的形式存放于硬盘中，因此可以存储比较复杂的数据类型。它是以单文档为单位存储的，你可以任意给一个或一批文档新增或删除字段，而不会对其它文档造成影响，这就是所谓的schema-free，这也是文档型数据库最主要的优点。跟一般的key-value数据库不一样的是，它的value中存储了结构信息，所以你又可以像关系型数据库那样对某些域进行读写、统计等操作。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。Mongo还可以解决海量数据的查询效率，根据官方文档，当数据量达到50GB以上数据时，Mongo数据库访问速度是MySQL10 倍以上。</p>

<h4>BSON</h4>

<p>　　BSON是Binary JSON 的简称，是一个JSON文档对象的二进制编码格式。BSON同JSON一样支持往其它文档对象和数组中再插入文档对象和数组，同时扩展了JSON的数据类型。如：BSON有Date类型和BinDate类型。</p>

<p>　　BSON被比作二进制的交换格式，如同Protocol Buffers，但BSON比它更“schema-less”，非常好的灵活性但空间占用稍微大一点。</p>

<p>BSON有以下三个特点：</p>

<p>1． 轻量级</p>

<p>2． 跨平台</p>

<p>3． 效率高</p>

<h4>命名空间</h4>

<p>　　MongoDB存储BSON对象到collections,这一系列的数据库名和collection名被称为一个命名空间。如同：java.util.List;用来管理数据库中的数据。</p>

<h4>索引</h4>

<p>　　mongodb可以对某个字段建立索引，可以建立组合索引、唯一索引，也可以删除索引，建立索引就意味着增加空间开销。默认情况下每个表都会有一个唯一索引：<em>id，如果插入数据时没有指定</em>id，服务会自动生成一个<em>id，为了充分利用已有索引，减少空间开销，最好是自己指定一个unique的key为</em>id，通常用对象的ID比较合适，比如商品的ID。</p>

<h3>2. 安装</h3>

<p>Linux系统下有两种安装方式:</p>

<h4>第一种：下载二进制包，然后解压到相应目录即可。</h4>

<ol>
<li><p>直接到<a href="http://www.mongodb.org/downloads">官网</a>下载二进制包，下载以后是一个tgz文件。</p>

<p> <code>curl http://downloads.mongodb.org/linux/mongodb-linux-i686-2.4.3.tgz &gt; mongodb.tgz</code></p></li>
<li><p>将文件解压到指定目录</p>

<p><code>tar -zxvf mongodb.tgz</code></p>

<p>重命名：</p>

<p><code>cp -R -n  mongodb-linux-????-??-??/ mongodb</code></p></li>
</ol>


<p>在 mongodb/bin 目录下可以看到和MongoDB相关的一些二进制文件包括 mongod 等。</p>

<p>到此为止MongoDB已经安装完成，接下来开始使用MongoDB：</p>

<p>在第一次启动mongdod的时候，需要创建存放数据文件的目录，默认的目录是 <code>/data/db/</code></p>

<p>首先创建这个目录： <code>mkdir -p /data/db</code></p>

<blockquote><p>注意：</p>

<p>要确保运行 mongod 进程的系统用户对改目录拥有读写权限。</p>

<p>如果 mongod 运行在 mongo 用户帐号下，可以使用 <code>chown mongo /data/db</code> 命令来更改该目录的拥有者。</p></blockquote>

<p>至此，我们已经可以运行 mongod ，也可以通过 mongo 命令来链接到数据库，前提是这两个命令要在 MongoDB 的安装目录下的bin目录下执行。</p>

<p>如果要直接使用这两个命令，需要将它们添加到系统的环境变量里面去，方法是在bin目录下执行</p>

<p><code>sudo cp mongo /usr/bin/</code></p>

<p>之后就可以在任意目录使用 mongo 命令了。</p>

<p>将mongodb 加入到开机启动,</p>

<p><code>sudo gedit /etc/rc.local</code></p>

<p>编辑 rc.local 加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#add mongonDB service 
</span><span class='line'>
</span><span class='line'>rm -rf /data/mongodb_data/* && /usr/local/mongodb/bin/mongod –dbpath=/data/mongodb_data/ –logpath=/data/mongodb_log/mongodb.log –logappend& </span></code></pre></td></tr></table></div></figure>


<p>注意.地址可能需要修改。</p>

<h4>第二种：通过命令行安装。</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mongodb</span></code></pre></td></tr></table></div></figure>


<p>该命令会安装以下软件包：</p>

<pre><code>mongodb-clients
mongodb-dev
mongodb-server
mongodb
</code></pre>

<p>安装完成以后会生成以下文件：</p>

<pre><code>数据文件： /var/lib/mongodb
日志文件： /var/log/mongodb/mongodb.log
服务脚本： /etc/init.d/mongodb
配置文件： /etc/mongodb.conf
</code></pre>

<p>如果要修改启动选项可以直接修改这个文件。</p>

<p>安装完成以后会在系统中新建一个用户 mongodb，会用这个用户帐号来启动 MongodDB，</p>

<p>MongodDB默认使用27017端口,通过 <code>netstat -tlunp | grep 27017</code> 可以查看到进程。</p>

<p>如果要以其他用户来运行Mongodb，需要修改 /var/lib/mongodb 和 /var/log/mongodb的权限。</p>

<p>可以通过命令 <code>sudo service mongodb start/stop/restart/status</code> 来控制mongod进程。</p>

<h3>3. 使用</h3>

<p>打开终端，输入 mongo 命令，连接到MongoDB数据库：</p>

<pre><code>╭─# ivan@ubuntu in ~/work ‹ruby-1.8.7@rails304›  
╰─$ mongo
MongoDB shell version: 2.0.4
connecting to: test
&gt; 
</code></pre>

<h3>简单操作命令：</h3>

<ul>
<li>进入数据库 admin：</li>
</ul>


<p><code>use admin</code></p>

<ul>
<li>增加或修改用户密码：</li>
</ul>


<p><code>db.addUser('name','pwd')</code></p>

<ul>
<li>查看用户列表</li>
</ul>


<p><code>db.system.users.find()</code></p>

<ul>
<li>用户认证</li>
</ul>


<p><code>db.auth('name','pwd')</code></p>

<ul>
<li>删除用户</li>
</ul>


<p><code>db.removeUser('name')</code></p>

<ul>
<li>查看所有用户</li>
</ul>


<p><code>show users</code></p>

<ul>
<li>查看所有数据库</li>
</ul>


<p><code>show dbs</code></p>

<ul>
<li>查看所有的 collection</li>
</ul>


<p><code>show collections</code></p>

<ul>
<li>查看各 collection 的状态</li>
</ul>


<p><code>db.printCollectionStats()</code></p>

<ul>
<li>查看主从复制状态</li>
</ul>


<p><code>db.printReplicationInfo()</code></p>

<ul>
<li>修复数据库</li>
</ul>


<p><code>db.repairDatabase()</code></p>

<ul>
<li>设置记录 profiling，0=off 1=slow 2=all</li>
</ul>


<p><code>db.setProfilingLevel(1)</code></p>

<ul>
<li>查看profiling</li>
</ul>


<p><code>show profile</code></p>

<ul>
<li>拷贝数据库</li>
</ul>


<p><code>db.copyDatabase('mail_addr','mail_addr_tmp')</code></p>

<ul>
<li>删除 collection</li>
</ul>


<p><code>db.mail_addr.drop()</code></p>

<ul>
<li>删除当前的数据库</li>
</ul>


<p><code>db.dropDatabase()</code></p>

<h3>增删改</h3>

<ul>
<li>存储嵌套的对象</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.save({'name':'ysz','address':{'city':'beijing','post':100096},'phone':[138,139]})</span></code></pre></td></tr></table></div></figure>


<ul>
<li>存储数组对象</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.user_addr.save({'Uid':'yushunzhi@sohu.com','Al':['test-1@sohu.com','test-2@sohu.com']})</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据query条件修改，如果不存在则插入，允许修改多条记录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.update({'yy':5},{'$set':{'xx':2}},upsert=true,multi=true)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除yy=5的记录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.remove({'yy':5})</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除所有的记录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.remove()</span></code></pre></td></tr></table></div></figure>


<h3>索引</h3>

<ul>
<li>增加索引：1(ascending),-1(descending)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.ensureIndex({firstname: 1, lastname: 1}, {unique: true});</span></code></pre></td></tr></table></div></figure>


<ul>
<li>索引子对象</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.user_addr.ensureIndex({'Al.Em': 1})</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看索引信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.getIndexes()
</span><span class='line'>db.foo.getIndexKeys()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据索引名删除索引</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.user_addr.dropIndex('Al.Em_1')</span></code></pre></td></tr></table></div></figure>


<h3>查询</h3>

<ul>
<li>查找所有</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.find()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查找一条记录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.findOne()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据条件检索10条记录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.find({'msg':'Hello 1'}).limit(10)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sort排序</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.deliver_status.find({'From':'ixigua@sina.com'}).sort({'Dt',-1})
</span><span class='line'>db.deliver_status.find().sort({'Ct':-1}).limit(1)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>count操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.user_addr.count()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>distinct操作,查询指定列，去重复</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.distinct('msg')</span></code></pre></td></tr></table></div></figure>


<ul>
<li>”>=”操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.find({"timestamp": {"$gte" : 2}})</span></code></pre></td></tr></table></div></figure>


<ul>
<li>子对象的查找</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.foo.find({'address.city':'beijing'})</span></code></pre></td></tr></table></div></figure>


<h3>管理</h3>

<ul>
<li>查看collection数据的大小</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.deliver_status.dataSize()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看colleciont状态</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.deliver_status.stats()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查询所有索引的大小</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.deliver_status.totalIndexSize()</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04下 SVN 安装和配置]]></title>
    <link href="http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04xia-svn-an-zhuang-he-pei-zhi/"/>
    <updated>2013-04-05T20:30:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04xia-svn-an-zhuang-he-pei-zhi</id>
    <content type="html"><![CDATA[<h3>1. 安装</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install subversion</span></code></pre></td></tr></table></div></figure>


<h3>2. 将最新版本文件签出到本地</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn checkout repository_path local_path --username 用户名  --password 密码</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn checkout svn://192.168.1.1/pro  --username 用户名 --password 密码</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn checkout http://192.168.1.1/pro --username 用户名 --password 密码</span></code></pre></td></tr></table></div></figure>


<p>简写：<code>$ svn co svn://192.168.1.1/pro</code>或者 <code>$ svn co http://192.168.1.1/pro</code></p>

<p>注：&#8211;password 参数传输密码的话，会提示输入密码。local_path  参数如果为空的话，会签出到当前目录。</p>

<h3>3. 导出(导出一个干净的不带.svn文件夹的目录树)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn export [-r 版本号] http://路径(目录或文件的全路径) [本地目录全路径] --username 用户名
</span><span class='line'>svn export [-r 版本号] svn://路径(目录或文件的全路径)  [本地目录全路径] --username 用户名
</span><span class='line'>svn export 本地检出的(即带有.svn文件夹的)目录全路径  要导出的本地目录全路径 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn export svn://192.168.0.3/测试工具 /home/testtools --username ivan
</span><span class='line'>svn export http://192.168.0.3/test/testapp --username ivan
</span><span class='line'>svn export /home/testapp /home/testtools</span></code></pre></td></tr></table></div></figure>


<p>注：</p>

<p>第一种从版本库导出干净工作目录树的形式是指定URL，如果指定了修订版本号，会导出相应的版本，如果没有指定修订版本，则会导出最新的，导出到指定位置。</p>

<p>如果省略 本地目录全路径，URL的最后一部分会作为本地目录的名字。</p>

<p>第二种形式是指定 本地检出的目录全路径 到 要导出的本地目录全路径，所有的本地修改将会保留，但是不在版本控制下(即没提交的新文件，因为.svn文件夹里没有与之相关的信息记录)的文件不会拷贝。</p>

<!-- more -->


<h3>4. 往版本库中添加新的文件</h3>

<p><code>$ svn add file</code> 告诉SVN服务器要添加文件了，还要用<code>svn commint -m</code>真实的上传上去！</p>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn add test.php   #(添加test.php)   
</span><span class='line'>$ svn add *.php      #(添加当前目录下所有的php文件) </span></code></pre></td></tr></table></div></figure>


<h3>5. 提交</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn commit -m “提交备注信息文本“ [-N] [--no-unlock] 文件名
</span><span class='line'>svn ci     -m “提交备注信息文本“ [-N] [--no-unlock] 文件名</span></code></pre></td></tr></table></div></figure>


<p>必须带上-m参数，参数可以为空，但是必须写上-m</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn commit -m “提交当前目录下的全部在版本控制下的文件“ *    #注意这个*表示全部文件 
</span><span class='line'>svn commit -m “提交我的测试用test.php“ test.php 
</span><span class='line'>svn commit -m “提交我的测试用test.php“ -N --no-unlock test.php    #保持锁就用–no-unlock开关 </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn ci -m “提交当前目录下的全部在版本控制下的文件“ *    #注意这个*表示全部文件 
</span><span class='line'>svn ci -m “提交我的测试用test.php“ test.php 
</span><span class='line'>svn ci -m “提交我的测试用test.php“ -N --no-unlock test.php    #保持锁就用–no-unlock开关</span></code></pre></td></tr></table></div></figure>


<h3>6. 更新文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn update 
</span><span class='line'>svn update -r 修正版本 文件名 
</span><span class='line'>svn update 文件名 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn update                    # 后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本 
</span><span class='line'>svn update -r 200 test.cpp    # 将版本库中的文件 test.cpp 还原到修正版本（revision）200 
</span><span class='line'>svn update test.php           # 更新与版本库同步。</span></code></pre></td></tr></table></div></figure>


<p>注：提交的时候提示过期冲突，需要先 update 修改文件，然后清除 svn resolved，最后再commit。</p>

<h3>7. 删除文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn delete svn://路径(目录或文件的全路径) -m “删除备注信息文本” </span></code></pre></td></tr></table></div></figure>


<p>推荐如下操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn delete 文件名  svn ci -m “删除备注信息文本”</span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn delete svn://192.168.1.1/testapp/test.php -m “删除测试文件test.php” </span></code></pre></td></tr></table></div></figure>


<p>推荐如下操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn delete test.php  svn ci -m “删除测试文件test.php”</span></code></pre></td></tr></table></div></figure>


<h3>8. 加锁/解锁</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn lock -m “加锁备注信息文本“ [--force] 文件名  
</span><span class='line'>svn unlock 文件名 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn lock -m “锁信测试用test.php文件“ test.php  
</span><span class='line'>svn unlock test.php </span></code></pre></td></tr></table></div></figure>


<h3>9. 比较差异</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn diff 文件名  
</span><span class='line'>svn diff -r 修正版本号m:修正版本号n 文件名 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn diff test.php              # 将修改的文件与基础版本比较 
</span><span class='line'>svn diff -r 200:201 test.php   # 对 修正版本号200 和 修正版本号201 比较差异</span></code></pre></td></tr></table></div></figure>


<h3>10. 查看文件或者目录状态</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn st     目录路径/名 
</span><span class='line'>svn status 目录路径/名   #目录下的文件和子目录的状态，正常状态不显示</span></code></pre></td></tr></table></div></figure>


<p>说明：  ?：不在svn的控制中；  M：内容被修改；C：发生冲突； A：预定加入到版本库；K：被锁定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn  -v 目录路径/名 
</span><span class='line'>svn status -v 目录路径/名    #显示文件和子目录状态</span></code></pre></td></tr></table></div></figure>


<p>说明：第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人</p>

<p>注：
svn status、svn diff 和 svn revert 这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝（但不是所有历史版本的拷贝，这点和GIT是不同的）。</p>

<h3>11. 查看日志</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn log 文件名 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn log test.php  #显示这个文件的所有修改记录，及其版本号的变化</span></code></pre></td></tr></table></div></figure>


<h3>12. 查看文件详细信息</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn info 文件名 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn info test.php</span></code></pre></td></tr></table></div></figure>


<h3>13. SVN 帮助</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn help          # 全部功能选项 
</span><span class='line'>svn help ci      # 具体功能的说明</span></code></pre></td></tr></table></div></figure>


<h3>14. 查看版本库下的文件和目录列表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn list svn://路径(目录或文件的全路径) 
</span><span class='line'>svn ls   svn://路径(目录或文件的全路径) </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn list svn://192.168.0.3/test 
</span><span class='line'>svn ls   svn://192.168.0.3/test   # 显示svn://192.168.0.3/test目录下的所有属于版本库的文件和目录 </span></code></pre></td></tr></table></div></figure>


<h3>15. 创建纳入版本控制下的新目录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn mkdir 目录名 
</span><span class='line'>svn mkdir -m "新增目录备注文本" http://目录全路径 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn mkdir newdir 
</span><span class='line'>svn mkdir -m "Making a new dir." http://192.168.0.3/test/newdir  </span></code></pre></td></tr></table></div></figure>


<p>注：添加完子目录后，一定要回到根目录更新一下，不然在该目录下提交文件会提示“提交失败”</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn update </span></code></pre></td></tr></table></div></figure>


<p>注：如果手工在checkout出来的目录里创建了一个新文件夹newsubdir，再用svn mkdir newsubdir命令后，SVN会提示：</p>

<pre><code>svn: 尝试用 “svn add”或 “svn add --non-recursive”代替？
svn: 无法创建目录“hello”: 文件已经存在
</code></pre>

<p>此时，用如下命令解决：<code>svn add --non-recursive newsubdir</code></p>

<p>再次进入这个newsubdir文件夹，用<code>ls -a</code>查看它下面的全部目录与文件，会发现多了：.svn目录</p>

<p>再用 <code>svn mkdir -m "添hello功能模块文件" svn://192.168.0.3/test/newdir/newsubdir</code> 命令，SVN提示：</p>

<pre><code>svn: File already exists: filesystem '/data/svnroot/test/db', transaction '4541-1',
path '/newdir/newsubdir '
</code></pre>

<h3>16. 恢复本地修改</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn revert [--recursive] 文件名 </span></code></pre></td></tr></table></div></figure>


<p>注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn revert foo.c            # 丢弃对一个文件的修改
</span><span class='line'>svn revert --recursive .    # 恢复一整个目录的文件，. 为当前目录</span></code></pre></td></tr></table></div></figure>


<h3>17. 把工作拷贝更新到别的URL</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn switch http://目录全路径 本地目录全路径 </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn switch http://192.163.0.3/test/456 . #(原为123的分支)当前所在目录分支到192.163.0.3/test/456</span></code></pre></td></tr></table></div></figure>


<h3>18. 解决冲突</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn resolved [本地目录全路径] </span></code></pre></td></tr></table></div></figure>


<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn update 
</span><span class='line'>C foo.c 
</span><span class='line'>Updated to revision 31. </span></code></pre></td></tr></table></div></figure>


<p>如果你在更新时得到冲突，你的工作拷贝会产生三个新的文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls 
</span><span class='line'>foo.c 
</span><span class='line'>foo.c.mine 
</span><span class='line'>foo.c.r30 
</span><span class='line'>foo.c.r31 </span></code></pre></td></tr></table></div></figure>


<p>当你解决了foo.c的冲突，并且准备提交，运行svn resolved让你的工作拷贝知道你已经完成了所有事情。 你可以仅仅删除冲突的文件并且提交，但是svn resolved除了删除冲突文件，还修正了一些记录在工作拷贝管理区域的记录数据，所以我们推荐你使用这个命令。</p>

<h3>19. 不checkout而查看输出特定文件或URL的内容</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn cat http://文件全路径 </span></code></pre></td></tr></table></div></figure>


<p>例子： <code>svn cat http://192.168.0.3/test/readme.txt</code></p>

<p>另外，在Linxu下，可视化SVN客户端可以用 Rabbitvcs 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04 安装 MySQL]]></title>
    <link href="http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04-an-zhuang-mysql/"/>
    <updated>2013-04-05T20:15:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/05/ubuntu12-dot-04-an-zhuang-mysql</id>
    <content type="html"><![CDATA[<h3>第一步：卸载mysql</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get autoremove --purge mysql-server-5.0
</span><span class='line'>sudo apt-get remove mysql-server
</span><span class='line'>sudo apt-get autoremove mysql-server
</span><span class='line'>sudo apt-get remove mysql-common (非常重要)</span></code></pre></td></tr></table></div></figure>


<h3>第二步：清理残留数据</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P</span></code></pre></td></tr></table></div></figure>


<h3>第三步：安装 mysql</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install mysql-client
</span><span class='line'>sudo apt-get install php5-mysql(安装php5-mysql 是将php和mysql连接起来 )</span></code></pre></td></tr></table></div></figure>


<p>一旦安装完成，MySQL 服务器应该自动启动。您可以在终端提示符后运行以下命令来检查 MySQL 服务器是否正在运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo netstat -tap | grep mysql</span></code></pre></td></tr></table></div></figure>


<p>当您运行该命令时，您可以看到类似下面的行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcp 0 0 localhost.localdomain:mysql *:* LISTEN -</span></code></pre></td></tr></table></div></figure>


<p>如果服务器不能正常运行，您可以通过下列命令启动它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/mysql restart</span></code></pre></td></tr></table></div></figure>


<h3>第四步：配置管理员密码</h3>

<p>进入mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysql -uroot -p 管理员密码</span></code></pre></td></tr></table></div></figure>


<p>配置 MySQL 的管理员密码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mysqladmin -u root password newpassword</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04 安装 Sublime Text 2 ]]></title>
    <link href="http://duyw.github.io/blog/2013/04/04/ubuntu12-dot-04-an-zhuang-sublime-text-2/"/>
    <updated>2013-04-04T22:41:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/04/ubuntu12-dot-04-an-zhuang-sublime-text-2</id>
    <content type="html"><![CDATA[<p>Sublime Text 2 是一款非常优秀的编辑器，可以媲美苹果系统下的TextMate，用Sublime Text 2 进行RoR开发是一件很惬意的事，在Ubuntu12.04系统下安装步骤如下：</p>

<ol>
<li><p>到<a href="http://www.sublimetext.com/2">官网</a>下载软件包： “Sublime Text 2.0.1.tar.bz2”。</p></li>
<li><p>复制到安装目录。</p></li>
<li><p>解压缩。</p></li>
<li><p>进入目录，创建desktop文件（sublime-text.desktop），并赋予可执行权限，启动sublime text 2 就直接运行该文件，这样就可以锁定在启动器，内容如下：</p>

<pre><code> #!/usr/bin/env xdg-open

 [Desktop Entry]
 Name=Sublime Text 2
 Comment=Sublime Text 2
 Exec=/home/ivan/apps/"Sublime Text 2"/sublime_text
 Icon=/home/ivan/apps/Sublime Text 2/Icon/256x256/sublime_text.png
 Terminal=false
 Type=Application
 Categories=Application;Development;
 StartupNotify=true
 Name[zh_CN]=sublime-text
</code></pre>

<p> 如果将文件复制到<code>/usr/share/applications/</code>目录下，就可以在Dash中被搜索到。</p></li>
</ol>


<!-- more -->


<ol>
<li><p>破解：</p>

<p> 首先备份安装目录下的sublime_text文件<code>cp sublime_text sublime_text.bak</code></p>

<p> 使用vim打开：<code>vim sublime_text</code> (如果没有安装vim，可以通过命令<code>sudo apt-get install vim</code>安装。)</p>

<p> 将文件转化成16进制,在vim中输入：<code>:%!xxd</code></p>

<p> 查找要修改的地方,在vim中输入： <code>/4333 3342</code></p>

<p> 将3342修改为3242</p>

<p> 将文件转换回去,在vim中输入： <code>:%!xxd -r</code></p>

<p> 保存文件、退出,在vim中输入： <code>:wq</code></p>

<p> 打开sublime text 2 编辑器，将下面的Licence填入即可大功告成：</p>

<pre><code> —–BEGIN LICENSE—–
 China
 Unlimited User License
 EA7E-2861
 BE67D2175D3569FDAB9EB5340FAD2822
 E7B56B3397A76AA9FBE8AC3D3C65918B
 DFC28F2EA158140D9E07853D594818EB
 3A237B2E8E98ED257C269548F50EDA34
 EF0C7F72D8917DB538A0245E46BFD6B1
 85F4EDE331F253530ED67A5C19E92399
 04C5F4A1AF4AF3DB5EC49C1FEE17CA76
 7E369F8AAE4AC6C6E756B5882E1608B9
 —–END LICENSE—–
</code></pre></li>
<li><p>创建链接，这样就可以直接在命令行中通过 sub 命令启动</p>

<p> <code>sudo ln -s /home/ivan/apps/Sublime\ Text\ 2/sublime_text /usr/bin/sub</code></p></li>
<li><p>安装插件安装管理工具“package control”</p>

<p> 打开 Sublime Text 2，按下 Control + ` 调出 Console，输入以下内容，回车执行：</p>

<pre><code> import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())
</code></pre></li>
<li><p>解决ubuntu12.04系统下中文输入问题：</p>

<p> 需要通过安装InputHelper插件来实现中文输入：</p>

<p> <code>cd ~/.config/sublime-text-2/Packages/</code></p>

<p> <code>git clone https://github.com/xgenvn/InputHelper.git</code></p>

<p> 也可以通过 package control 来安装.</p>

<p> 使用方法：重启 Sublime Text 2 ,通过快捷键 Shift ＋ Ctrl ＋ Z 来呼出输入窗口，可在其中输入汉字，输入完成直接回车即可。</p></li>
<li><p>相关插件介绍</p>

<p> 待续&#8230;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04 安装 JDK]]></title>
    <link href="http://duyw.github.io/blog/2013/04/04/ubuntu12-dot-04an-zhuang-jdk/"/>
    <updated>2013-04-04T22:30:00+08:00</updated>
    <id>http://duyw.github.io/blog/2013/04/04/ubuntu12-dot-04an-zhuang-jdk</id>
    <content type="html"><![CDATA[<p>很多软件运行需要JRE环境，下面的方法用于在Ubuntu中安装JDK：</p>

<ol>
<li><p>首先下载JDK，点击<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk6downloads-1902814.html">这里</a>下载（以“jdk-6u26-linux-i586.bin”为例）下载好以后放到安装位置（以<code>~/apps</code>目录为例）。</p></li>
<li><p>设置安装文件权限： <code>chmod u+x ./jdk-6u26-linux-i586.bin</code></p></li>
<li><p>安装：<code>sudo -s ./jdk-6u26-linux-i586.bin</code></p></li>
<li><p>配置环境变量：</p>

<p> <code>sudo gedit /etc/profile</code></p>

<p> 在文件末尾写入以下内容：</p>

<pre><code> #set java environment    

 JAVA_HOME=/home/ivan/apps/jdk1.6.0_26   

 export JRE_HOME=/home/ivan/apps/jdk1.6.0_26/jre   

 export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH   

 export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 

 #set java environment
</code></pre></li>
<li><p>测试：</p>

<p> 重启terminal,执行： <code>java -version</code> ，输出版本信息，说明安装成功。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
